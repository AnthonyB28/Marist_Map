<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreInteractionFramework</name>
    </assembly>
    <members>
        <member name="T:CoreInteractionFramework.SizeF">
            <summary>
            SizeF is basically a partial duplicate of System.Drawing.SizeF. It is internal
            and meant for our own use (for convenience instead of carrying around two floats
            everywhere.)
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Simple constructor - specify the width and height
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.op_Explicit(CoreInteractionFramework.SizeF)~CoreInteractionFramework.PointF">
            <summary>
            Explicitly converts an instance of SizeF to an instance of PointF.
            </summary>
            <param name="size">The SizeF value to be converted.</param>
            <returns>A PointF equal in value to this instance of SizeF.</returns>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.op_Explicit(CoreInteractionFramework.SizeF)~CoreInteractionFramework.VectorF">
            <summary>
            Explicitly converts an instance of SizeF to an instance of VectorF.
            </summary>
            <param name="size">The SizeF value to be converted.</param>
            <returns>A VectorF equal in value to this instance of SizeF.</returns>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.op_Equality(CoreInteractionFramework.SizeF,CoreInteractionFramework.SizeF)">
            <summary>
            == operator definition
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.op_Inequality(CoreInteractionFramework.SizeF,CoreInteractionFramework.SizeF)">
            <summary>
            != operator definition
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.Equals(System.Object)">
            <summary>
            Equals override
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.GetHashCode">
            <summary>
            GetHashCode override (does nothing)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.SizeF.ToString">
            <summary>
            ToString override
            </summary>
            <returns></returns>
        </member>
        <member name="P:CoreInteractionFramework.SizeF.Width">
            <summary>
            Get or set the width
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.SizeF.Height">
            <summary>
            Get or set the height
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ListBoxStateMachineItem">
            <summary>
            Represents a list box item state. 
            </summary>
            <remarks><para>
            The <strong>ListBoxStateMachineItem</strong> class does not derive from the 
            <strong><see cref="T:CoreInteractionFramework.UIElementStateMachine"/></strong> and consequently 
            cannot be hit tested. All hit testing is provided by the 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> 
            object that instantiates this class. The main purpose of this class is to provide state 
            information such as whether a list box item is selected or not.
            </para></remarks>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.#ctor(System.Single,System.Single)">
            <summary>
            Creates an element for containment in a 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object
            with the specified parameters.
            </summary>
            <param name="horizontalSize">The width of the item in list box space. 
            The size can be larger than 1 if the item size is larger than the list box's size.
            </param>
            <param name="verticalSize">The height of the item in list box space. The size can 
            be larger than 1 if the item size is larger than the list box's size.
            </param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.#ctor(System.Object,System.Single,System.Single)">
            <summary>
            Creates an element for containment in a 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object
            with the specified parameters.
            </summary>
            <param name="tag">An object bound to this item.</param>
            <param name="horizontalSize">The width of the item in list box space. 
            The size can be larger than 1 if the item size is larger than the list box's size.
            </param>
            <param name="verticalSize">The height of the item in list box space. 
            The size can be larger than 1 if the item size is larger than the list box's size.
            </param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.ResetItem">
            <summary>
            Clears an item.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.OnItemStateChanged">
            <summary>
            Called when this list box item's <strong><see cref="P:CoreInteractionFramework.ListBoxStateMachineItem.IsSelected"/></strong> state is changing.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.ChangeToScrolling">
            <summary>
            The ListBoxStateMachine controls if it is scrolling and so it needs to inform
            the item that it has changed state.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.ProcessTouchDown(System.Int32)">
            <summary>
            Handles TouchDown events.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.ProcessCapturedTouchUp(System.Int32)">
            <summary>
            Handles TouchUp Events for touches which are captured.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItem.ProcessResetState">
            <summary>
            Reset the GotItemStateChanged state.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.ListBoxStateMachineItem.ItemStateChanged">
            <summary>
            Triggered when a ListBoxItemModel ItemStateChange occurs. Events in the Core are
            triggered only after the UIController.Update method is called and before the 
            method call returns.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.Tag">
            <summary>
            Gets or sets a system object that is used to hold data for this <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object.
            </summary>
            <returns>The data object that is stored with this <strong>ListBoxStateMachineItem</strong> object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.IsVisible">
            <summary>
            Gets the value that indicates visibility of this 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object. </summary>
            <remarks>An item is not visible if it is outside 
            of the viewport. This visibility changes if the item is scrolled into view.
            </remarks>
            <returns><strong>true</strong> if this item is currently in viewport of the list box.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.IsPressed">
            <summary>
            Gets a Boolean value that indicates if this <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> 
            object is pressed.
            </summary>
            <returns><strong>true</strong> if this <strong>ListBoxStateMachineItem</strong> object is currently pressed; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.IsScrolling">
            <summary>
            Gets a value that determines if this <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object is 
            currently scrolling (based on if the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> parent is scrolling).
            </summary>
            <returns><strong>true</strong> if the parent <strong>ListBoxStateMachine</strong> object is scrolling.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.IsSelected">
            <summary>
            Gets or sets the value that indicates whether this 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object is selected.
            </summary>
            <returns><strong>true</strong> if this <strong>ListBoxStateMachineItem</strong> object is currently selected.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.GotItemStateChanged">
            <summary>
            Gets or sets a value that indicates whether an <strong><see cref="E:CoreInteractionFramework.ListBoxStateMachineItem.ItemStateChanged"/></strong> event
            occurred in this update cycle. 
            </summary>
            <remarks>If the application is not using the <strong>ItemStateChanged</strong> 
            event, the application should check the <strong>GotItemStateChanged</strong> property after each call to the 
            <strong>Update</strong> method of <strong>UIController</strong>.</remarks>
            <return><strong>true</strong> if state changed for <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> in the update cycle.</return>
            <example>
            <para>
             The following code example demonstrates the use of various <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> properties
             including <strong>GotItemStateChanged</strong>.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" region="Listbox Item State" title="Listbox Item State" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.HorizontalSize">
            <summary>
            Gets or sets the horizontal size value of this 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object, relative to the parent object viewport.
            </summary>
            <returns>The horizontal size of this <strong>ListBoxStateMachineItem</strong> object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.VerticalSize">
            <summary>
            Gets or sets the vertical size value of this 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object, relative to the parent object viewport.
            </summary>
            <returns>The vertical size of this <strong>ListBoxStateMachineItem</strong> object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.VerticalExtentStartPosition">
            <summary>
            Gets or sets the starting vertical position of the 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object, relative to the extent.
            </summary>
            <returns>The starting vertical position of the <strong>ListBoxStateMachineItem</strong> object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.HorizontalExtentStartPosition">
            <summary>
            Gets or sets the starting horizontal position of the 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object, relative to the extent.
            </summary>
            <returns>The starting horizontal position of the <strong>ListBoxStateMachineItem</strong> object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.VerticalStartPosition">
            <summary>
            Gets or sets the starting vertical position of the 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object, relative to the parent list box.
            </summary>
            <remarks>The <strong>VerticalStartPosition</strong> property is valid only when the item is visible.</remarks>
            <returns>The starting vertical position of the <strong>ListBoxStateMachineItem</strong> object.
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid operation.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument out of range.</exception>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.HorizontalStartPosition">
            <summary>
            Gets or sets the starting horizontal position of the 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object, relative to the parent list box.
            </summary>
            <remarks>The <strong>HorizontalStartPosition</strong> property is valid only when the item is visible.</remarks>
            <returns>The starting horizontal position of the <strong>ListBoxStateMachineItem</strong> object.
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid operation.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument out of range.</exception>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItem.Parent">
            <summary>
            Gets the parent <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object of this 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object.
            </summary>
            <return>The parent <strong>ListBoxStateMachine</strong> object.</return>
        </member>
        <member name="T:CoreInteractionFramework.StateMachineTouchEventArgs">
            <summary>Represents details for events that relate to touches on an 
            <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine">IInputElementStateMachine</see></strong> object.</summary>
        </member>
        <member name="P:CoreInteractionFramework.StateMachineTouchEventArgs.StateMachine">
            <summary>
            The state machine that raised this event.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ListBoxMode">
            <summary>
            The mode of the list box.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxMode.Selection">
            <summary>
            Items are selected when a touch goes up over an item.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxMode.Scrolling">
            <summary>
            Scrolling occur and no items are selected.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ScrollBarPart">
            <summary>
            Defines the parts of a <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ScrollBarPart.None">
            <summary>
            No part.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ScrollBarPart.Thumb">
            <summary>
            The thumb of the <strong>ScrollBarStateMachine</strong> object.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ScrollBarPart.Track">
            <summary>
            The track of the <strong>ScrollBarStateMachine</strong> object.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.StopwatchHelper">
            <summary>
            A helper class to retrieve timestamp in 100-nanosecond units.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.StopwatchHelper.Get100NanosecondsTimestamp">
            <summary>
            Gets the current timestamp in 100-nanosecond units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.StopwatchHelper.Elapsed100Nanoseconds(System.Diagnostics.Stopwatch)">
            <summary>
            Gets the elapsed time in 100-nanosecond units.
            </summary>
            <param name="stopwatch"></param>
            <returns></returns>
        </member>
        <member name="T:CoreInteractionFramework.ScrollViewerHitTestDetails">
            <summary>
            Provides more details about the touch hit on the <strong>ScrollViewer</strong> object, including 
            access to inherited data through <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong>.    
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.IHitTestDetails">
            <summary>
            Provides more information about the hit test. </summary>
            <remarks>Not all state machines require 
            more details. If additional details are required about a hit test, there will 
            be a class named <em>(ControlName)</em><strong>HitTestDetails</strong>. For example, 
            the <strong><see cref="T:CoreInteractionFramework.ScrollBarHitTestDetails"/></strong> 
            class provides more details about a hit test for a 
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> state machine. 
            Classes that do not require addition details do not have 
            a corresponding <strong>HitTestDetails</strong> class. For example, 
            <strong><see cref="T:CoreInteractionFramework.ButtonStateMachine"/></strong> does not 
            require more details and so there is no <strong>ButtonHitTestDetails</strong> class.
            </remarks>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerHitTestDetails.#ctor">
            <summary>
            Creates a 
            <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> instance.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerHitTestDetails.#ctor(System.Single,System.Single)">
            <summary>
            Creates a 
            <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> instance with the specified parameters. 
            </summary>
            <param name="horizontalPosition">The horizontal normalized coordinate 
            where a touch hit the scroll bar from 0 to 1. A value of 0 indicates a 
            left-most hit, and a value of 1 indicates a right-most hit on the scroll bar.</param>
            <param name="verticalPosition">The vertical normalized coordinate where a 
            touch hit the scroll bar from 0 to 1. A value of 0 indicates a 
            top-most hit, and value of 1 indicates a bottom-most hit of the scroll bar.</param>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerHitTestDetails.HorizontalPosition">
            <summary>
            Gets or sets the horizontal normalized coordinate where a touch hit 
            the scroll bar. 
            </summary>
            <remarks>Valid float values are within the range from 0 to 1. A value of 
            0 indicates a left-most hit, and a value of 1 indicates a right-most hit on the scroll bar.</remarks>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerHitTestDetails.VerticalPosition">
            <summary>
            Gets or sets the vertical normalized coordinate where a touch hit 
            the scroll bar. 
            </summary>
            <remarks>Valid float values are within the range from 0 to 1. A value 
            of 0 indicates a top-most hit, and a value of 1 indicates a bottom-most hit on the scroll bar.</remarks>
        </member>
        <member name="T:CoreInteractionFramework.ScrollBarStateMachine">
            <summary>
            Maintains and manages the state that is associated with an application-defined UI scroll bar 
            object. 
            </summary>
            <remarks>
            <para>The<strong>ScrollBarStateMachine</strong> 
            maintains the following types of state elements:</para>
            <list type="bullet">
            <item>The direction that the scroll bar is oriented toward 
            (<strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.Orientation"/></strong>).</item>
            <item>If scrolling is occurring or not 
            (<strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.IsScrolling"/></strong>).</item>
            <item>Position monitoring 
            (<strong><see cref="E:CoreInteractionFramework.ScrollBarStateMachine.ValueChanged"/></strong> and 
            <strong><see cref="E:CoreInteractionFramework.ScrollBarStateMachine.ThumbChanged"/></strong>).</item>
            </list>
            <note type="caution"> The Core Interaction Framework and API use the 
            Model-View-Controller (MVC) design pattern. The API state machines 
            represent the Model component of the MVC design pattern. </note>
            </remarks>    
        </member>
        <member name="T:CoreInteractionFramework.UIElementStateMachine">
            <summary>
            Specifies the base class for all <strong>UIElementStateMachine</strong> classes such as 
            <strong><see cref="T:CoreInteractionFramework.ButtonStateMachine"/></strong>.  
            </summary>
            <remarks>
            <note type="caution"> The Core Interaction Framework and API use the 
            Model-View-Controller (MVC) design pattern. State machines 
            represents the Model component of the MVC design pattern. </note>
            </remarks>    
        </member>
        <member name="T:CoreInteractionFramework.IInputElementStateMachine">
            <summary>
            Defines an interface for working with state machines that update their state based on the 
            <strong>Update</strong>
            method being called from some outside controller.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.IInputElementStateMachine.Update(System.Collections.Generic.Queue{CoreInteractionFramework.TouchTargetEvent})">
            <summary>
            Changes the internal state based on the specified list of touch events.
            </summary>
            <param name="touches">The list of touches used to update the state for this state
            machine.</param>
        </member>
        <member name="M:CoreInteractionFramework.IInputElementStateMachine.OnGotTouchCapture(Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Called when this state machine captures a new touch.
            </summary>
            <param name="touch">A touch that this state machine captures.</param>
        </member>
        <member name="M:CoreInteractionFramework.IInputElementStateMachine.OnLostTouchCapture(Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Called when this state machine release a currently captured touch.
            </summary>
            <param name="touch">The touch that is no longer captured.</param>
        </member>
        <member name="P:CoreInteractionFramework.IInputElementStateMachine.TypeOfHitTestDetails">
            <summary>
            Provides type information about a hit test.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.IInputElementStateMachine.Controller">
            <summary>
            Gets or sets the controller to use with this state machine.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.IInputElementStateMachine.Tag">
            <summary>
            Gets or sets the tag that is associated with this state machine.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnNumberOfPixelsInHorizontalAxisChanged">
            <summary>
            Called when the number of pixels in the horizontal axis changes.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnNumberOfPixelsInVerticalAxisChanged">
            <summary>
            Called when the number of pixels in the vertical axis changes.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.#ctor(CoreInteractionFramework.UIController,System.Int32,System.Int32)">
            <summary>
            Initializes the <strong><see cref="T:CoreInteractionFramework.UIElementStateMachine"/></strong> objects.
            </summary>
            <param name="controller">The controller for this <strong>UIElementStateMachine</strong> object.</param>
            <param name="numberOfPixelsInHorizontalAxis">
            The number of pixels that this control occupies horizontally. 
            For more information, see 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxis">NumberOfPixelsInHorizontalAxis</see></strong>.
            </param>
            <param name="numberOfPixelsInVerticalAxis">
            The number of pixels that this control occupies vertically. 
            For more information, see 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxis">NumberOfPixelsInVerticalAxis</see></strong>.
            </param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnResetState(System.Object,System.EventArgs)">
            <summary>
            Overrides <strong>OnResetState</strong> to handle the 
            <strong><see cref="E:CoreInteractionFramework.UIController.ResetState"/></strong> event.
            Performs actions necessary to reset the state machine state at the beginning
            of each update cycle.
            </summary>
            <param name="sender">The controller that raised the 
            <strong>UIController.ResetState</strong> event.</param>
            <param name="e">Empty.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnTouchMoved(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Called when a touch that is routed to this state machine changed.
            </summary>
            <param name="touchEvent">The container object for the touch that changes.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnTouchDown(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Called when a touch that is routed to this state machine goes down.
            </summary>
            <param name="touchEvent">The container object for the touch that is down.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnTouchEnter(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Called when a touch that is routed to this state machine enters the state machine.
            </summary>
            <param name="touchEvent">The container for the touch that entered this state 
            machine.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnTouchLeave(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Called when a touch that is routed to this state machine leaves the state machine.
            </summary>
            <param name="touchEvent">The container object for the departed touch.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnTouchUp(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Called when a touch that is routed to this state machine is removed.
            </summary>
            <param name="touchEvent">The container for the removed touch.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnGotTouchCapture(Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Called when the 
            <strong><see cref="M:CoreInteractionFramework.UIController.Capture"/></strong> method is called for a touch and this 
            state machine.
            </summary>
            <param name="touch">The container for the touch that is captured.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnLostTouchCapture(Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Called when the 
            <strong><see cref="M:CoreInteractionFramework.UIController.Release"/></strong>
             method is called for a touch that this state machine captured.
            </summary>
            <param name="touch">The touch that is released.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIElementStateMachine.OnUpdated(System.Collections.Generic.Queue{CoreInteractionFramework.TouchTargetEvent})">
            <summary>
            Called when all of the touch events have been routed to this state machine.
            </summary>
            <param name="orderTouches">An ordered list of touches for each touch event.</param>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxis">
            <summary>
            Represents the number of pixels that this control occupies horizontally. 
            </summary>
            <returns>The horizontal dimension (width) of this control.</returns>
            <remarks>
            <para>
            Many Microsoft Surface controls require data about how much of a change has occurred in 
            physical screen space. The <strong>NumberOfPixelsInHorizontalAxis</strong> property provides mapping for this control from 
            normal space to screen space. For controls that occupy only 2-D screen spaces, 
            you can set this property as the height of the control, regardless of how it is 
            rotated in 2-D space. You should update this property when the control changes size.
            </para>
            <note type="caution"> If this control occupies 3-D space, set <strong>NumberOfPixelsInHorizontalAxis</strong> 
            to the number of pixels in screen space that the control projects into. You can update this 
            value as needed, but it is taken into account only when 
            <strong><see cref="M:CoreInteractionFramework.UIController.Update"/></strong>
            is called.</note>
            </remarks>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxisChanged">
            <summary>
            Occurs when the <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxis"/></strong> property is updated to a different 
            value.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxis">
            <summary>
            Represents the number of pixels that this control occupies vertically. 
            </summary>
            <returns>The vertical dimension (height) of this control.</returns>
            <remarks>
            <para>
            Many Microsoft Surface controls require data about how much of a change has occurred in 
            physical screen space. The <strong>NumberOfPixelsInVerticalAxis</strong> property provides mapping for this control from 
            normal space to screen space. For controls that occupy only 2-D screen spaces, 
            you can set this property as the height of the control, regardless of how it is 
            rotated in 2-D space. You should update it when the control changes size.
            </para>
            <note type="caution"> If this control occupies 3-D space, set <strong>NumberOfPixelsInVerticalAxis</strong> 
            to the number of pixels in screen space that the control projects into. You can update 
            this value as needed, but it is taken into account only when 
            <strong><see cref="M:CoreInteractionFramework.UIController.Update"/></strong> 
            is called.</note>
            </remarks>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxisChanged">
            <summary>
            Occurs when the 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxis"/></strong>
            property is updated to a 
            different value.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.TouchMoved">
            <summary>
            Occurs when a touch that is routed to this state machine changes.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.TouchDown">
            <summary>
            Occurs when a touch that is routed to this state machine goes down.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.TouchEnter">
            <summary>
            Occurs when a touch that is routed to this state machine enters the state machine.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.TouchLeave">
            <summary>
            Occurs when a touch that is routed to this state machine leaves the state machine.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.TouchUp">
            <summary>
            Occurs when a touch that is routed to this state machine is removed from the state machine.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.GotTouchCapture">
            <summary>
            Occurs when the 
            <strong><see cref="M:CoreInteractionFramework.UIController.Capture"/></strong> 
            method is called for a touch and this state machine.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIElementStateMachine.LostTouchCapture">
            <summary>
            Occurs when the 
            <strong><see cref="M:CoreInteractionFramework.UIController.Release"/></strong>
            method is called for a touch that this state machine captured.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.TouchesCaptured">
            <summary>
            Gets the touches that this state machine captured.
            </summary>
            <returns>
            A cached touch collection.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.TouchesOver">
            <summary>
            Gets the touches over this state machine.
            </summary>
            <returns>A collection of touches over this state machine.</returns>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.Controller">
            <summary>
            Gets or sets the <strong><see cref="T:CoreInteractionFramework.UIController"/></strong>
            object for this state machine.
            </summary>
            <returns>The <strong>UIController</strong> object for this state machine.</returns>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.Tag">
            <summary>
            Gets or sets a data storage object for this state machine.
            </summary>
            <returns>The tag data object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.TypeOfHitTestDetails">
            <summary>
            Gets the type that implements 
            <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> for this state machine. 
            </summary>
            <remarks>If <strong>TypeOfHitTestDetails</strong> returns null, the second parameter should be null 
            when your application calls 
            the <strong><see cref="M:CoreInteractionFramework.HitTestResult.SetCapturedHitTestInformation"/></strong>
            or <strong><see cref="M:CoreInteractionFramework.HitTestResult.SetUncapturedHitTestInformation"/></strong> 
            methods, when the first parameter is this type of state machine.
            </remarks>
            <returns>The type that implements <strong>IHitTestDetails</strong> for this state machine.</returns>
        </member>
        <member name="T:CoreInteractionFramework.UIElementStateMachine.ReadOnlyTouchCollectionCache">
            <summary>
            Manages a cached TouchCollection so that an editable version of the
            collection maybe accessed by internal components and a readonly version
            maybe returned to public callers.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.UIElementStateMachine.ReadOnlyTouchCollectionCache.actualTouchCollection">
            <summary>
            Used for caching. This should be used other then by 
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.ReadOnlyTouchCollectionCache.EditableTouchCollection">
            <summary>
            Gets the collection of touches which are over this state machine.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.UIElementStateMachine.ReadOnlyTouchCollectionCache.CachedTouchCollection">
            <summary>
            Gets a cached version of the ReadOnlyTouchCollection.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.#ctor(CoreInteractionFramework.UIController,System.Int32,System.Int32)">
            <summary>
            Creates an initialized instance of a
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object with the specified parameters.
            </summary>
            <param name="controller">The <strong>UIController</strong> object that dispatches hit testing.</param>
            <param name="numberOfPixelsInHorizontalAxis">
            The number of pixels that this control occupies horizontally. 
            For more information, see 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxis">NumberOfPixelsInHorizontalAxis</see></strong>.
            </param>
            <param name="numberOfPixelsInVerticalAxis">
            The number of pixels that this control occupies vertically. 
            For more information, see 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxis">NumberOfPixelsInVerticalAxis</see></strong>.
            </param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.PageForward">
            <summary>
            Scrolls the thumb 1 page forward over 0.5 seconds.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.PageBack">
            <summary>
            Scrolls the thumb 1 page back over 0.5 seconds.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.ScrollTo(System.Single)">
            <summary>
            Scrolls the thumb to the specified value. 
            </summary>
            <param name="value">The value where the thumb should scroll. Valid values are from 0 through 1.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.StopFlick">
            <summary>
            Stops the thumb from scrolling if it is currently being flicked.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnValueChanged">
            <summary>
            Called when the <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.Value"/></strong>
            property changes.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnThumbChanged">
            <summary>
            Called when the 
            <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.ThumbSize"/></strong>
             property or position changes.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnTouchMoved(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the <strong>TouchMoved</strong> event.
            </summary>
            <param name="touchEvent">The container for the touch that the event is about.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnTouchDown(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the <strong>TouchDown</strong> event.
            </summary>
            <param name="touchEvent">The container for the touch that the event is about.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnAffine2DManipulationCompleted(System.Object,System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs)">
            <summary>
            Start the flicking behavior. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnAffine2DInertiaCompleted(System.Object,System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs)">
            <summary>
            Set the flick to completed so that it stops moving.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnAffine2DInertiaDelta(System.Object,System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs)">
            <summary>
            Update the position of the Value and the thumb each delta. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnTouchUp(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the <strong>TouchUp</strong> event.
            </summary>
            <param name="touchEvent">The container for the touch that the event is about.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.OnResetState(System.Object,System.EventArgs)">
            <summary>
            Handles the reset state event.
            </summary>
            <param name="sender">A <strong>UIController</strong> object.</param>
            <param name="e">Empty.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.CheckForTrackCaptureAndChange">
            <summary>
            Checks each touch to see if the thumb has moved under it.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.GetScrollBarPartHit(CoreInteractionFramework.ScrollBarHitTestDetails)">
            <summary>
            Captures the touch and calculates which part the touch hit: Thumb or Track. 
            </summary>
            <param name="details">Details about the hit test</param>
            <returns>The part which was hit.</returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.AverageCapturedTouchesInThumbList">
            <summary>
            Returns the average of the captured touches in the ThumbList.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.UpdatedValueInValueSpace(System.Single)">
            <summary>
            Updates the position of the thumb and other appropriate properties.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.GetFrontOfTrackQueue">
            <summary>
            Returns the first captured touch at the front of the TrackQueue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarStateMachine.AnimateTo(System.Single)">
            <summary>
            Animates from the position of the thumb to the the to parameter over the appropriate amount of time.
            </summary>
            <param name="to"></param>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.Orientation">
            <summary>
            Gets or sets the direction that the 
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object 
            is oriented toward.  
            </summary>
            <returns>The current enumeration value that identifies <strong>ScrollBarStateMachine</strong> 
            orientation.</returns>
            <remarks>
            Orientation zero-based enumeration identifiers include <strong>Vertical</strong> (0x0), 
            <strong>Horizontal</strong> (0x1), <strong>Default</strong> (0x0), or <strong>Both</strong> 
            (an OR combination of <strong>Vertical</strong> and <strong>Horizontal</strong>). 
            The <strong>Orientation</strong> property affects if 
            <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.NumberOfPixelsInHorizontalAxis"/></strong>
            or <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.NumberOfPixelsInVerticalAxis"/></strong>
            is used when flicking the <strong>ScrollBarStateMachine</strong> object.  
            </remarks>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.NumberOfPixelsInHorizontalAxis">
            <summary>
            Gets or sets the scroll bar width (horizontal axis), in pixels.
            </summary>
            <returns>The current horizontal pixel width of the scroll bar.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.NumberOfPixelsInVerticalAxis">
            <summary>
            Gets or sets the scroll bar height (vertical axis), in pixels.
            </summary>
            <returns>The current vertical pixel height of the scroll bar.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.SelectedPart">
            <summary>
            Gets the selected <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> part.  
            </summary>
            <returns>The currently selected <strong>ScrollBarStateMachine</strong> part.</returns>
            <remarks><strong>ScrollBarStateMachine</strong> parts include the thumb and the track.
            </remarks>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.Value">
            <summary>
            Gets or sets the position value of the scroll bar.   
            </summary>
            <remarks>The position 
            value is represented by a floating point number with a valid range from 0 through 1.</remarks>
            <returns>The current scroll bar value.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.ViewportSize">
            <summary>
            Gets or sets the ratio of the size of the scroll bar viewport versus the 
            extent. 
            <remarks>Extent is always 1, so the viewport size must be 1 or less. If the viewport 
            is 1, there is no scrolling. If the viewport size is 0.5, the viewport is half 
            the size of the extent and the scroll bar is half the size of the scroll bar. 
            </remarks>
            </summary>
            <returns>The current scroll bar viewport size.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.IsReversed">
            <summary>
            Gets or sets a Boolean value that identifies whether the scroll bar is scrolling in the opposite 
            direction.
            </summary>
            <returns><strong>true</strong> if scrolling is occurring in the opposite direction.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.MinThumbSize">
            <summary>
            Gets or sets the minimum size of the scroll bar's thumb. 
            </summary>
            <returns>The current minimum size of the scroll bar's thumb.</returns>
            <remarks>The thumb 
            size is represented as a floating point number with a valid range from 0 through 1.  </remarks>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.GotValueChanged">
            <summary>
            Gets a Boolean value that indicates whether the scroll bar 
            <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.Value"/></strong>
            property has changed.  
            </summary>
            <returns><strong>true</strong> if the <strong>Value</strong> property changed since the controller was 
            updated.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.GotThumbChanged">
            <summary>
            Gets a Boolean value that indicates whether the scroll bar 
            <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.ThumbSize"/></strong>
             property has changed 
            since the controller was last updated.  
            </summary>
            <returns><strong>true</strong> if the <strong>ThumbSize</strong> property changed.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.IsScrolling">
            <summary>
            Gets a Boolean value that indicates if scrolling is presently occurring on the scroll 
            bar.
            </summary>
            <returns><strong>true</strong> if the scroll bar is currently scrolling.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.ThumbSize">
            <summary>
            Gets the current normalized size of the scroll bar's thumb. 
            </summary>
            <remarks>The thumb size is represented as a floating point number with a valid range 
            from 0 through 1. 
            </remarks>
            <returns>The current normalized thumb size.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.ThumbStartPosition">
            <summary>
            Gets the start position of the scroll bar's thumb. 
            </summary>
            <remarks>The thumb 
            start position is represented as a floating point number with a valid range from 0 through 1. </remarks>
            <returns>The thumb's start position.</returns>
        </member>
        <member name="E:CoreInteractionFramework.ScrollBarStateMachine.ValueChanged">
            <summary>
            Occurs when the 
            <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.Value"/></strong> property changes.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.ScrollBarStateMachine.ThumbChanged">
            <summary>
            Occurs when the 
            <strong><see cref="P:CoreInteractionFramework.ScrollBarStateMachine.ThumbSize"/></strong>
            property or position changes.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.TypeOfHitTestDetails">
            <summary>
            Gets the type of <strong><see cref="T:CoreInteractionFramework.ScrollBarHitTestDetails"/></strong>.
            </summary>
            <returns>Type as <strong>typeof(ScrollBarHitTestDetails)</strong>.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarStateMachine.MaximumFlickVelocity">
            <summary>
            Gets or sets the maximum flick velocity for the 
            scroll bar's thumb, in device-independent units per millisecond.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.VectorF">
            <summary>
            Represents a displacement in 2-D space.
            </summary>
            <remarks>
            Yes, this is basically the same as System.Windows.Vector. Why don't we use
            that one? Because we don't want to link to that assembly.
            </remarks>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the VectorF structure.
            </summary>
            <param name="x">The X-offset of the new VectorF.</param>
            <param name="y">The Y-offset of the new VectorF.</param>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Explicit(CoreInteractionFramework.VectorF)~CoreInteractionFramework.PointF">
            <summary>
            Creates a point with the X and Y values of this vector.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>A point with X- and Y-coordinate values equal to the X and Y offset values of vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Explicit(CoreInteractionFramework.VectorF)~CoreInteractionFramework.SizeF">
            <summary>
            Creates a size from the offsets of this vector.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>A size with a Width equal to the absolute value of this vector's X property
            and a Height equal to the absolute value of this vector's Y property.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_UnaryNegation(CoreInteractionFramework.VectorF)">
             <summary>
             Negates the specified vector.
             </summary>
             <param name="vector">The vector to negate.</param>
             <returns>A vector with X and Y values opposite of the X and Y values of vector.
            </returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Negate">
            <summary>
            Negates this vector.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Inequality(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Compares two vectors for inequality.
            </summary>
            <param name="vector1">The first vector to compare.</param>
            <param name="vector2">The second vector to compare.</param>
            <returns>true if the X and Y components of vector1 and vector2
            are different; otherwise, false.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Equality(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="vector1">The first vector to compare.</param>
            <param name="vector2">The second vector to compare.</param>
            <returns>true if the X and Y components of vector1 and vector2
            are equal; otherwise, false.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Equals(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Compares the two specified vectors for equality.
            </summary>
            <param name="vector1">The first vector to compare.</param>
            <param name="vector2">The second vector to compare.</param>
            <returns>true if the X and Y components of vector1 and vector2 are equal;
            otherwise, false.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a VectorF structure and,
            if it is, whether it has the same X and Y values as this vector.
            </summary>
            <param name="o">The vector to compare.</param>
            <returns>true if o is a VectorF and has the same X and Y values as this vector;
            otherwise, false.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Equals(CoreInteractionFramework.VectorF)">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="value">The vector to compare with this vector.</param>
            <returns>true if value has the same X and Y values as this vector;
            otherwise, false.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Addition(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Adds two vectors and returns the result as a vector.
            </summary>
            <param name="vector1">The first vector to add.</param>
            <param name="vector2">The second vector to add.</param>
            <returns>The sum of vector1 and vector2.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Add(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Adds two vectors and returns the result.
            </summary>
            <param name="vector1">The first vector to add.</param>
            <param name="vector2">The second vector to add.</param>
            <returns> The sum of vector1 and vector2.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Addition(CoreInteractionFramework.VectorF,CoreInteractionFramework.PointF)">
            <summary>
            Translates a point by the specified vector and returns the resulting point.
            </summary>
            <param name="vector">The vector used to translate point.</param>
            <param name="point">The point to translate.</param>
            <returns>The result of translating point by vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Add(CoreInteractionFramework.VectorF,CoreInteractionFramework.PointF)">
            <summary>
            Translates the specified point by the specified vector and returns the resulting point.
            </summary>
            <param name="vector">The amount to translate the specified point.</param>
            <param name="point">The point to translate.</param>
            <returns>The result of translating point by vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Subtraction(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Subtracts one specified vector from another.
            </summary>
            <param name="vector1">The vector from which vector2 is subtracted.</param>
            <param name="vector2">The vector to subtract from vector1.</param>
            <returns>The difference between vector1 and vector2.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Subtract(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Subtracts the specified vector from another specified vector.
            </summary>
            <param name="vector1">The vector from which vector2 is subtracted.</param>
            <param name="vector2">The vector to subtract from vector1.</param>
            <returns>The difference between vector1 and vector2.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Multiply(System.Single,CoreInteractionFramework.VectorF)">
            <summary>
            Multiplies the specified scalar by the specified vector and returns the resulting vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="vector">The vector to multiply.</param>
            <returns>The result of multiplying scalar and vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Multiply(CoreInteractionFramework.VectorF,System.Single)">
            <summary>
            Multiplies the specified scalar by the specified vector and returns the resulting vector.
            </summary>
            <param name="vector">The vector to multiply.</param>
            <param name="scalar">The scalar to multiply.</param>
            <returns>The result of multiplying scalar and vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Division(CoreInteractionFramework.VectorF,System.Single)">
            <summary>
            Divides the specified vector by the specified scalar and returns the resulting vector.
            </summary>
            <param name="vector">The vector to divide.</param>
            <param name="scalar">The scalar by which vector will be divided.</param>
            <returns>The result of dividing vector by scalar.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Multiply(System.Single,CoreInteractionFramework.VectorF)">
            <summary>
            Multiplies the specified scalar by the specified vector and returns the resulting vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="vector">The vector to multiply.</param>
            <returns>The result of multiplying scalar and vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Multiply(CoreInteractionFramework.VectorF,System.Single)">
            <summary>
            Multiplies the specified scalar by the specified vector and returns the resulting vector.
            </summary>
            <param name="vector">The vector to multiply.</param>
            <param name="scalar">The scalar to multiply.</param>
            <returns>The result of multiplying scalar and vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Divide(CoreInteractionFramework.VectorF,System.Single)">
            <summary>
            Divides the specified vector by the specified scalar and returns the result.
            </summary>
            <param name="vector">The vector structure to divide.</param>
            <param name="scalar">The amount by which vector is divided.</param>
            <returns>The result of dividing vector by scalar.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.op_Multiply(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Calculates the dot product of the two specified vector structures.
            </summary>
            <param name="vector1">The first vector to multiply.</param>
            <param name="vector2">The second vector to multiply.</param>
            <returns>Returns the scalar dot product of vector1 and vector2, which is calculated
            using the following formula: vector1.X * vector2.X + vector1.Y * vector2.Y</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Multiply(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Calculates the dot product of the two specified vectors and returns the result.
            </summary>
            <param name="vector1">The first vector to multiply.</param>
            <param name="vector2">The second vector structure to multiply.</param>
            <returns>The scalar dot product of vector1 and vector2, which is calculated
            using the following formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y)</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.CrossProduct(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector to evaluate.</param>
            <param name="vector2">The second vector to evaluate.</param>
            <returns>The cross product of vector1 and vector2. The following formula is used to
            calculate the cross product: (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.Determinant(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Calculates the determinant of two vectors.
            </summary>
            <param name="vector1">The first vector to evaluate.</param>
            <param name="vector2">The second vector to evaluate.</param>
            <returns>The determinant of vector1 and vector2.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.AngleBetween(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF)">
            <summary>
            Retrieves the angle, expressed in radians, between the two specified vectors.
            </summary>
            <param name="vector1">The first vector to evaluate.</param>
            <param name="vector2">The second vector to evaluate.</param>
            <returns>The angle, in radians, between vector1 and vector2.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.GetHashCode">
            <summary>
            Returns the hash code for this vector.
            </summary>
            <returns>The hash code for this vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.ToString">
            <summary>
            Returns the string representation of this VectorF structure.
            </summary>
            <returns>A string that represents the X and Y values of this VectorF.</returns>
        </member>
        <member name="M:CoreInteractionFramework.VectorF.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this VectorF structure with the specified
            formatting information.
            </summary>
            <param name="provider">The culture-specific formatting information.</param>
            <returns>A string that represents the X and Y values of this VectorF.</returns>
        </member>
        <member name="P:CoreInteractionFramework.VectorF.X">
            <summary>
            Gets or sets the X component of this vector.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.VectorF.Y">
            <summary>
            Gets or sets the Y component of this vector.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.VectorF.Length">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.VectorF.LengthSquared">
            <summary>
            Gets the square of the length of this vector.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.UIController">
            <summary>
            Represents the UI controller. 
            </summary>
            <remarks>A <strong>UIController</strong> object retrieves touches from the ordered 
            touch events buffer, hit tests the touches, and routes touches that were hit tested 
            successfully or were captured to the correct state machine.  </remarks>
        </member>
        <member name="F:CoreInteractionFramework.UIController.swapLock">
            <summary>
            A lock to synchronize access to the swapLock.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.OnResetState">
            <summary>
            Raises the <strong><see cref="E:CoreInteractionFramework.UIController.ResetState"/></strong> event to enable listeners to 
            reset their state before any touches are processed.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.#ctor(Microsoft.Surface.Core.TouchTarget,CoreInteractionFramework.HitTestCallback)">
            <summary>
            Creates a <strong><see cref="T:CoreInteractionFramework.UIController"/></strong> instance with the specified parameters.
            </summary>
            <param name="touchTarget">A touch target to use for collecting touches.</param>
            <param name="hitTestCallback">A delegate that is used to do hit testing.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIController.Capture(Microsoft.Surface.Core.TouchPoint,CoreInteractionFramework.IInputElementStateMachine)">
            <summary>
            Gives exclusive access to events that are raised for a particular touch.  
            </summary>
            <remarks>All events raised on the specified touch are routed to the element that passed
            to the <strong>Capture</strong> method. The 
            <strong><see cref="M:CoreInteractionFramework.HitTestCallback"/></strong> delegate is not called while
            a touch is captured.
            </remarks>
            <param name="touch">The touch to capture.</param>
            <param name="element">The element to route the captured touch's event to.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIController.GetCapturingElement(Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Gets the 
            <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> object
            that has captured the touch.  
            </summary>
            <param name="touch">The touch to check if it is captured by a 
            <strong>IInputElementStateMachine</strong> object.
            </param>
            <returns>The <strong>IInputElementStateMachine</strong> object that the touch was captured on as 
            <strong>IInputElementStateMachine</strong>. Returns null if the touch is not captured.</returns>
        </member>
        <member name="M:CoreInteractionFramework.UIController.Release(Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Releases a captured touch. 
            </summary>
            <remarks>The <strong>Release</strong> method causes hit testing to be
            performed for the specified touch.</remarks>
            <param name="touch">The touch to release.</param>
        </member>
        <member name="M:CoreInteractionFramework.UIController.DoesHitTestMatchCapture(Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Specifies whether the touch hit tested to the capturing element.
            </summary>
            <param name="touch">The touch to test.</param>
            <returns><strong>true</strong> if hit tested to the captured element; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:CoreInteractionFramework.UIController.Update">
            <summary>
            Processes input that the <strong>TouchTarget</strong> receives and dispatches that input for 
            hit testing and 
            <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> updates.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.Swap">
            <summary>
            Swaps the <strong>orderedTouchEvents</strong> and the <strong>orderedTouchEventsBackbuffer</strong>.  This is thread-safe.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.RoutePackagedTouches">
            <summary>
            Causes each Touch in orderedTouchEvents to be routed 
            to the IInputElementStateMachine associated with the Touch in Touches.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.DispatchHitTesting">
            <summary>
            Calls HitTestCallBack passing a dictionary (Dictionary&lt;Touch, IInputElementStateMachine\&gt;) which contains a single 
            touch for each touch id that was in orderedTouchEvents.  Captured touches are removed from
            this dictionary when it is constructed and placed in touchesToRoute so that they aren't hit tested. 
            When the call to HitTestCallback returns the pairs (KeyValuePair&lt;Touch, IInputElementStateMachine&gt;) which contain 
            non-null IInputElementStateMachine are added to touchesToRoute.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.PackageCapturedTouches">
            <summary>
            Packages touches which are captured and places them into the packagedTouch dictionary so they are 
            ready to be routed to the IInputElementStateMachine.       
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.HitTestNonCapturedTouches">
            <summary>
            Calls the users HitTestCallback delegate passing the unpackaged touches.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.ClearTouchOverState">
            <summary>
            This method clears out all the tracked touches over the UI elements.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.ClearOrderedTouchEvents">
            <summary>
            This method clears out all the collections that were used during this update loop.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.OnTouchAdded(System.Object,Microsoft.Surface.Core.TouchEventArgs)">
            <summary>
            Handles TouchAdded events from the TouchTarget
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.OnTouchRemoved(System.Object,Microsoft.Surface.Core.TouchEventArgs)">
            <summary>
            Handles TouchRemoved events from the TouchTarget
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.UIController.OnTouchMoved(System.Object,Microsoft.Surface.Core.TouchEventArgs)">
            <summary>
            Handles TouchMoved events from the TouchTarget
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.UIController.ResetState">
            <summary>
            Occurs in <strong>Update</strong> before any touches are processed. 
            </summary>
            <remarks>The <strong>ResetState</strong> event gives
            listeners a chance to reset any state before <strong>Update</strong> is processed.</remarks>
        </member>
        <member name="T:CoreInteractionFramework.SelectionMode">
            <summary>
            The selection mode for items.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.SelectionMode.Single">
            <summary>
            Only one item can be selected.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.SelectionMode.Multiple">
            <summary>
            Multiple items can be selected.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.SelectionMode.Default">
            <summary>
            Item selection defaults to <strong>Single</strong>.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.FlickUtilities.MinimumFlickVelocity">
            <summary>
            Minimum flick velocities measured in device independent 
            units per millisecond.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.FlickUtilities.MaximumFlickVelocity">
            <summary>
            Maximum flick velocities measured in device independent 
            units per millisecond.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.FlickUtilities.MaximumFlickDuration">
            <summary>
            Maximum duration of the flick measured in milliseconds. 
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.FlickUtilities.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts the value passed in to the range min..max (inclusive).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>
            The value passed in, if it falls between min and max.
            Otherwise returns the boundary value that is closest to the clamped value.
            If value is NaN, then NaN is returned.
            </returns>
        </member>
        <member name="M:CoreInteractionFramework.FlickUtilities.GetDecelerationGivenDistanceAndDuration(System.Single,System.Single)">
            <summary>
            Calculates deceleration.
            </summary>
            <param name="distance">The distance the object travels while decelerating.</param>
            <param name="duration">The time it takes for the object to stop moving.</param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.FlickUtilities.GetDurationGivenVelocityAndDeceleration(System.Single,System.Single)">
            <summary>
            Calculates duration.
            </summary>
            <remarks>
            <strong>NOTE:</strong> this method ignores signs of velocity and deceleration 
            parameters.
            </remarks>
            <param name="velocity">Current rate of position change of the object in motion.</param>
            <param name="deceleration">Rate of deceleration of the object in motion.</param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.FlickUtilities.GetDurationGivenDistanceAndVelocity(System.Single,System.Single)">
            <summary>
            Calculates duration.
            </summary>
            <remarks>
            <strong>NOTE:</strong> this method ignores signs of velocity and distance parameters.
            </remarks>
            <param name="distance">Distance traveled by the object in question.</param>
            <param name="velocity">Object rate of position change.</param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.FlickUtilities.GetDistanceGivenVelocityAndDuration(System.Single,System.Single)">
            <summary>
            Calculates distance.
            </summary>
            <param name="velocity">Object rate of position change.</param>
            <param name="duration">The time traveled by the object.</param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.FlickUtilities.TryGetFlickDistance(CoreInteractionFramework.VectorF,CoreInteractionFramework.VectorF@,CoreInteractionFramework.VectorF)">
            <summary>
            Calculates the page size for a flick with a given velocity.
            The method chooses vertical or horizontal direction depending on the
            given initial velocity.
            </summary>
            <param name="velocity">flick velocity in device independent units per msec.</param>
            <param name="flickDistance">flick page size in device independent units.</param>
            <param name="maxViewportSize">The maximum size of the viewport.</param>
            <returns></returns>
        </member>
        <member name="T:CoreInteractionFramework.Orientation">
            <summary>
            Defines values that represent the orientation of the state machine. 
            </summary>
            <remarks>Enumeration values begin
            with <strong>Vertical</strong> = 0x1, <strong>Horizontal</strong>, <strong>Default</strong> (<strong>Vertical</strong>), 
            and <strong>Both</strong> (an OR combination of <strong>Vertical</strong> and <strong>Horizontal</strong>.</remarks>
        </member>
        <member name="F:CoreInteractionFramework.Orientation.Vertical">
            <summary>
            The state machine is oriented in the vertical direction.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.Orientation.Horizontal">
            <summary>
            The state machine is oriented in the horizontal direction.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.Orientation.Default">
            <summary>
            The default direction is <strong>Vertical</strong>.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.Orientation.Both">
            <summary>
            Scroll in both directions. This value is not a valid option for 
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> objects.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ListBoxStateMachine">
            <summary>
            Maintains and manages state that is associated with an application-defined UI list box
            object. 
            </summary>
            <remarks>
            <para>Some aspects of <strong>ListBoxStateMachine</strong> state include:</para>
            <list type="bullet">
            <item>List box item state changes (<strong><see cref="P:CoreInteractionFramework.ListBoxStateMachine.GotItemStateChanged"/></strong>).</item>
            <item>Scroll bar state changes (<strong><see cref="P:CoreInteractionFramework.ListBoxStateMachine.IsScrolling"/></strong>).</item>
            <item>How list box items are selected (<strong><see cref="P:CoreInteractionFramework.ListBoxStateMachine.SelectionMode"/></strong>).</item>
            <item>The direction the scroll bar is oriented toward (<strong><see cref="P:CoreInteractionFramework.ListBoxStateMachine.Orientation"/></strong>).</item>
            </list>
            <para>Also state information from individual list box items is available from the
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItemCollection"/></strong> data member.</para>
            <note type="caution"> The Core Interaction Framework and API use the
            Model-View-Controller (MVC) design pattern. The API state machines
            represent the Model component of the MVC design pattern.</note>
            </remarks>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.DragDistanceLimit">
            <summary>
            1/8 of inch (based on 96 DPI), max drag distance to start scrolling and 'cancel' selection
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.scrollAdapterTouches">
            <summary>
            Keep track which touches have been added to the scroll adapter.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.touchChangeDeltaTouchIds">
            <summary>
            Used to track how much a touch has changed since it went down on the ListBox.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.touchTargetEventTouchIds">
            <summary>
            Tracks captured touch TouchTargetEvent id.
            This is use to track the position a touch is currently at.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.capturedItemTouchIds">
            <summary>
            Tracks captured touch ids to a particular item for which they are "captured".
            This is used because <strong>ListBoxStateMachineItem</strong> objects can't actually capture touches,
            but they track which touches are "logically" captured.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.orientation">
            <summary>
            The current orientation of the ListBox
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.selectionMode">
            <summary>
            The current mode for selection of items.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.scrollAdapter">
            <summary>
            Provides default scrolling behavior.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.items">
            <summary>
            The items which this ListBox currently contains.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ListBoxStateMachine.selectedItems">
            <summary>
            The selected items in this ListBox.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.#ctor(CoreInteractionFramework.UIController,System.Int32,System.Int32)">
            <summary>
            Creates an initialized instance of a
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object with the specified parameters.
            </summary>
            <param name="controller">The <strong>UIController</strong> object that dispatches hit testing.</param>
            <param name="numberOfPixelsInHorizontalAxis">
            The number of pixels that this control occupies horizontally.
            For more information, see <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxis">
            NumberOfPixelsInHorizontalAxis</see></strong>.
            </param>
            <param name="numberOfPixelsInVerticalAxis">
            The number of pixels that this control occupies vertically.
            For more information, see <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxis">
            NumberOfPixelsInVerticalAxis</see></strong>.
            </param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnSelectedItemsListBoxItemAdded(System.Object,CoreInteractionFramework.ListBoxStateMachineItemEventArgs)">
            <summary>
            Called when a ListBoxStateMachineItem is added to the selectedItems collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnSelectedItemsListBoxItemRemoved(System.Object,CoreInteractionFramework.ListBoxStateMachineItemEventArgs)">
            <summary>
            Called when a ListBoxStateMachineItem is removed to the selectedItems collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnListBoxItemAdded(System.Object,CoreInteractionFramework.ListBoxStateMachineItemEventArgs)">
            <summary>
            Called when a ListBoxStateMachineItem is added to the items collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnListBoxItemRemoved(System.Object,CoreInteractionFramework.ListBoxStateMachineItemEventArgs)">
            <summary>
            Called when a ListBoxStateMachineItem is removed from the items collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnItemStateChanged(System.Object,CoreInteractionFramework.ListBoxStateMachineItemEventArgs)">
            <summary>
            Handles the ItemStateChanged event for all items in the list box.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnItemStateChanged(CoreInteractionFramework.ListBoxStateMachineItem)">
            <summary>
            Called from the <strong>OnItemStateChanged</strong> event handler to
            raise the <strong><see cref="E:CoreInteractionFramework.ListBoxStateMachine.ItemStateChanged"/></strong> event for clients of this 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object.
            </summary>
            <param name="item">The item that changed state.</param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.GetVisibleItems">
            <summary>
            Gets the collection of 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> objects that
            are partially or completely visible.
            </summary>
            <returns>The list box items that are visible in the viewport.</returns>
            <example>
            <para>
             In this code example, the <strong>GetVisibleItems</strong> method retrieves the
             collection of visible list box items and iterates over them to determine their
             respective selected states and take appropriate action.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" region="Button 2" title="Button 2" lang="cs"/>
            </example>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.HitTestWithin(System.Single)">
            <summary>
            Gets the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object 
            at the specified position in
            this <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object based on orientation.
            </summary>
            <param name="position">The normalized position that is relative to the viewport.</param>
            <returns>The <strong>ListBoxStateMachineItem</strong> that is hit.</returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.ScrollTo(System.Single,System.Single)">
            <summary>
            Scrolls the viewport to the specified values.
            </summary>
            <param name="viewportTopPosition">The y-coordinate to scroll to.</param>
            <param name="viewportLeftPosition">The x-coordinate to scroll to.</param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.StopFlick">
            <summary>
            Causes the thumb to stop scrolling if it is currently being flicked.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnViewportChanged">
            <summary>
            Called when any of the viewport properties change to 
            raise the <strong><see cref="E:CoreInteractionFramework.ListBoxStateMachine.ViewportChanged"/></strong> event.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnTouchDown(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles <strong>TouchDown</strong> events.
            </summary>
            <param name="touchEvent">The list Box item touch that was added.</param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnTouchUp(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles <strong>TouchUp</strong> events.
            </summary>
            <param name="touchEvent">The touch that is removed from the list box item.</param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnTouchMoved(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles <strong>TouchMoved</strong> events.
            </summary>
            <param name="touchEvent">The list box item touch that changed.</param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnResetState(System.Object,System.EventArgs)">
            <summary>
            Reset the <strong><see cref="P:CoreInteractionFramework.ListBoxStateMachine.GotItemStateChanged"/></strong> state.
            </summary>
            <param name="sender">A <strong>UIController</strong> object.</param>
            <param name="e">Empty.</param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.UpdateLayout">
            <summary>
            Informs the ListBox that an update has occured.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.UpdateItemSize(System.Int32,System.Int32,CoreInteractionFramework.Orientation)">
            <summary>
            Updates the size of the items so they don't change their render size.
            </summary>
            <param name="currentNumberOfPixelsInAxis"></param>
            <param name="newNumberOfPixelsInAxis"></param>
            <param name="orientationUpdated"></param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.LayoutItemsInExtentSpace">
            <summary>
            Lays out each StateMachineItem based on its size and position.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.GetHorizontalExtentLength">
            <summary>
            Calculates the total size of the extent in the horizontal axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.GetVerticalExtentLength">
            <summary>
            Calculates the total size of the extent in the vertical axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.UpdateVisibleItems">
            <summary>
            Based on the StateMachineItem.*ExtentStartPosition the
            visible items are determined and their StateMachineItem.*StartPosition property
            is set. Additionally an item's IsVisible property is set to true for all items
            that are currently in the Viewport.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.GetItemHit(CoreInteractionFramework.ListBoxHitTestDetails)">
            <summary>
            Gets the <strong>ListBoxStateMachineItem</strong> object based on the hit test information.
            </summary>
            <param name="listBoxHitTestDetails"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.UpdateTouchPosition(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Updates the position of the touch information in touchTargetEventTouchIds
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.DidTouchMovePastThreshold(System.Int32)">
            <summary>
            Tests the touch position change to see if its past the threshold of 1/8".
            </summary>
            <param name="touchId"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.GetScreenSpace(System.Single)">
            <summary>
            Gets the number of pixels for the value specified.
            </summary>
            <param name="value">Value is in 0-to-1 extent space.</param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachine.OnScrollAdapterViewportChanged(System.Object,System.EventArgs)">
            <summary>
            When the viewport changes update the layout of the items.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:CoreInteractionFramework.ListBoxStateMachine.ItemStateChanged">
            <summary>
            Occurs when a list box item state has changed.
            </summary>
            <example>
            <para>
             The following code example shows how to subscribe to the <strong>ItemStateChanged</strong> event.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs"
             region="Initialize Listbox" title="Initialize Listbox" lang="cs" />
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.GotItemStateChanged">
            <summary>
            Gets a Boolean value that indicates whether a
            <strong><see cref="E:CoreInteractionFramework.ListBoxStateMachine.ItemStateChanged"/></strong> event occurred in this update for a 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> in items.
            </summary>
            <remarks>Your application should check the <strong>GotItemStateChanged</strong> property 
            each time after <strong>UIController.Update</strong> is called if you are not using the
            <strong>ItemStateChanged</strong> event.
            </remarks>
            <returns><strong>true</strong> if a list box item state has changed within the current update cycle.
            </returns>
            <example>
            <para>
             The following code example demonstrates <strong>GotItemStateChanged</strong> on the 
             <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong>
             and its related <strong>GotItemStateChanged</strong> properties.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" region="Listbox Item State" title="Listbox Item State" lang="cs"/>
            </example>
        </member>
        <member name="E:CoreInteractionFramework.ListBoxStateMachine.ViewportChanged">
            <summary>
            Occurs when any of the viewport properties change.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.GotViewportChange">
            <summary>
            Gets a value that represents whether the viewport has changed.
            </summary>
            <returns><strong>true</strong> if any of the viewport properties have changed within the
            current update cycle (since the controller was last updated).</returns>
            <example>
            <para>
             The following code example demonstrates the use of various 
             <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> properties,
             including <strong>GotViewportChange</strong>.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" region="Listbox Item State" title="Listbox Item State" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.ListBoxMode">
            <summary>
            Gets a value that represents the current <strong><see cref="T:CoreInteractionFramework.ListBoxMode"/></strong>
            mode based on the touches
            that are manipulating the list box.
            </summary>
            <returns>The current <strong>ListBoxMode</strong> enumeration value. The possible 
            values include <strong>Selection</strong> and <strong>Scrolling</strong>.</returns>
            <example>
            <para>
             The following code example demonstrates the use of various <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> properties
             including mode verification by using <strong>ListBoxMode</strong>.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" region="Listbox Item State" title="Listbox Item State" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.Items">
            <summary>
            Gets a value that represents the collection of 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> objects
            in the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> state machine.
            </summary>
            <returns>The ListBoxStateMachine collection of items.</returns>
            <example>
            <para>
             This example uses <stron>ListBoxStateMachineItemCollection</stron>
             to validate state data for objects (weapons) associated with the ListBox items.
            </para>
             <code source="Core\Framework\StarshipArsenal\WeaponSystems.cs" region="Weapons Check" title="Weapons Check" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.SelectedItems">
            <summary>
            Gets the collection of <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> objects
            in the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object.
            </summary>
            <returns>The collection of selected list box items.</returns>
            <example>
            <para>
             The following code example shows the <strong>SelectedItems.Count</strong> property used in a decision statement.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" region="Got Clicked Test" title="Got Clicked Test" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.SelectionMode">
            <summary>
            Gets or sets a value that represents <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> selection behavior. </summary>
            <remarks>The possible
            values include <strong>Single</strong> and <strong>Multiple</strong>. 
            <strong>SelectionMode.Single</strong> enables selecting
            only one list box item at a time, while <strong>SelectionMode.Multiple</strong> enables
            selecting all list box items.
            </remarks>
            <returns>The current <strong>SelectionMode</strong> enumeration value. </returns>
            <example>
            <para>
             The following code example initializes some <strong>ListBoxStateMachine</strong> properties, including
             changing the selection mode to <strong>Multiple</strong> (the default value is <strong>Single</strong>).
            </para>
             <code source="Core\Framework\StarshipArsenal\UI\ListBox.cs" region="Initializing ListBox" title="Initializing ListBox" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.Orientation">
            <summary>
            Gets or sets a value that represents the orientation of items in the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object.
            </summary>
            <returns>The current orientation enumeration value. The possible values include <strong>Vertical</strong>,
            <strong>Horizontal</strong>, and <strong>Both</strong>.</returns>
            <example>
            <para>
             The following code example initializes some <strong>ListBoxStateMachine</strong> properties, including
             changing <strong>Orientation</strong> to <strong>Vertical</strong>.
            </para>
             <code source="Core\Framework\StarshipArsenal\UI\ListBox.cs" region="Initializing ListBox" title="Initializing ListBox" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.NumberOfPixelsInHorizontalAxis">
            <summary>
            Gets or sets a value that represents the number of horizontal pixels that the
            viewable list box occupies.
            <remarks>Changing the <strong>NumberOfPixelsInHorizontalAxis</strong> property causes the 
            size of the items in the
            list box to be recalculated so that they do not change when the size of the control
            changes.
            </remarks>
            </summary>
            <returns>The current number of pixels in the horizontal axis.</returns>
            <example>
            <para>
             The following code example initializes <strong>NumberOfPixelsInHorizontalAxis</strong> and
             <strong><see cref="P:CoreInteractionFramework.ListBoxStateMachine.NumberOfPixelsInVerticalAxis"/></strong>.
            </para>
             <code source="Core\Framework\StarshipArsenal\UI\ScrollBar.cs" region="Load ScrollBar Graphics" title="Load ScrollBar Graphics" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.NumberOfPixelsInVerticalAxis">
            <summary>
            Gets or sets a value that represents the number of vertical pixels that the
            viewable list box occupies.
            <remarks>Changing the <strong>NumberOfPixelsInVerticalAxis</strong> property causes the 
            size of the items in the list box
            to be recalculated so that they do not change when the size of the control changes.
            </remarks>
            </summary>
            <returns>The current number of pixels in the horizontal axis.</returns>
            <example>
            <para>
             The following code example initializes <strong><see cref="P:CoreInteractionFramework.ListBoxStateMachine.NumberOfPixelsInHorizontalAxis"/></strong> and
             <strong>NumberOfPixelsInVerticalAxis</strong>.
            </para>
             <code source="Core\Framework\StarshipArsenal\UI\ScrollBar.cs" region="Load ScrollBar Graphics" title="Load ScrollBar Graphics" lang="cs"/>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.TypeOfHitTestDetails">
            <summary>
            Gets a type that is equal to <strong><see cref="T:CoreInteractionFramework.ListBoxHitTestDetails"/></strong>
            that is
            the <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> type of a 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object.
            </summary>
            <returns>A <strong>ListBoxHitTestDetails</strong> type.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.HorizontalScrollBarStateMachine">
            <summary>
            Gets or sets a value that represents the horizontal 
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object.
            </summary>
            <returns>The current horizontal <strong>ScrollBarStateMachine</strong> object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.VerticalScrollBarStateMachine">
            <summary>
            Gets or sets the vertical <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object.
            </summary>
            <returns>The current vertical <strong>ScrollBarStateMachine</strong> object.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.HorizontalElasticity">
            <summary>
            Gets or sets a value that represents the left and right elastic margins.
            </summary>
            <returns>The current value of <strong>scrollAdapter.HorizontalElasticity</strong>.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.VerticalElasticity">
            <summary>
            Gets or sets a value that represents the top and bottom elastic margins.
            </summary>
            <returns>The current value of <strong>scrollAdapter.VerticalElasticity</strong>.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.HorizontalViewportSize">
            <summary>
            Gets or sets a value that represents the horizontal normalized width of the viewport.
            </summary>
            <returns>The current value of <strong>scrollAdapter.HorizontalViewportSize</strong>.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.VerticalViewportSize">
            <summary>
            Gets or sets the vertical normalized height of the viewport.
            </summary>
            <returns>The current value of <strong>scrollAdapter.VerticalViewportSize</strong>.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.HorizontalViewportStartPosition">
            <summary>
            Gets or sets a value that represents the starting normalized horizontal coordinate
            of the viewport.
            </summary>
            <returns>The current value of <strong>scrollAdapter.HorizontalViewportStartPosition</strong>.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.VerticalViewportStartPosition">
            <summary>
            Gets or sets the starting normalized vertical coordinate of
            the viewport.
            </summary>
            <returns>The value of <strong>scrollAdapter.VerticalViewportStartPosition</strong>.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachine.IsScrolling">
            <summary>
            Gets a value that represents whether scrolling is occurring.
            </summary>
            <returns><strong>true</strong> if currently scrolling; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="T:CoreInteractionFramework.ScrollBarHitTestDetails">
            <summary>
            Provides more details about the touch hit on the scroll bar, including 
            members of its <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> base class.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarHitTestDetails.#ctor">
            <summary>
            Creates an <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> object for a 
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollBarHitTestDetails.#ctor(System.Single)">
            <summary>
            Creates an <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> object for a 
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object with the
            specified parameters.
            </summary>
            <param name="position">The point where a touch hit the scroll bar. Valid values
            are from 0 through 1.  
            </param>
        </member>
        <member name="P:CoreInteractionFramework.ScrollBarHitTestDetails.Position">
            <summary>
            Gets or sets the position value where a touch hit 
            the scroll bar.  
            </summary>
            <remarks>The valid values for <strong>Position</strong> range from 0 through 1. A value of 
            0 indicates a topmost hit, and a value of 1 indicates a bottommost hit of the scroll bar.</remarks>
            <returns>The point where a touch hit the scroll bar.</returns>
        </member>
        <member name="T:CoreInteractionFramework.ScrollAdapter">
            <summary>
            Handles the details of scrolling content and flicking.
            
            This class should be used for StateMachines which want to have a ScrollViewer behavior,
            such as ListBoxStateMachine.
            
            Scroll values are given by HitTestDetails which are normalized.
            However for manipulations and inertia the values are converted into Screen Space
            so that flicking is consistent across controls. The values are then converted into
            scrollBar value space to update the scroll bar.
            
            All updates are done through setting the ScrollBar.Value property for the appropriate scrollbar.
            This allows for consistent handling between the ScrollAdapter(ScrollViewer) and the ScrollBars.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.#ctor(CoreInteractionFramework.UIController,CoreInteractionFramework.UIElementStateMachine)">
            <summary>
            Creates a new ScrollViewerStateMachine.
            </summary>
            <param name="controller">The UIController which dispatches hit testing.</param>
            <param name="elementToScroll">The element which is scrolling.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.VerticalScrollBarStateMachineNumberOfPixelsInVerticalAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Because the scrollbars can be assigned the NumberOfPixelsInVerticalAxis property may not line up
            with the pixels in the ScrollViewer, so we line them up.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.HorizontalScrollBarStateMachineNumberOfPixelsInHorizontalAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Because the scrollbars can be assigned the NumberOfPixelsInHorizontalAxis property may not line up
            with the pixels in the ScrollViewer, so we line them up.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnViewportChanged">
            <summary>
            Called when any of the viewport properties change.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.PageUp">
            <summary>
            Causes the viewport to scroll one page towards the top.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.PageDown">
            <summary>
            Causes the viewport to scroll one page towards the bottom.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.PageLeft">
            <summary>
            Causes the viewport to scroll one page towards the left.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.PageRight">
            <summary>
            Causes the viewport to scroll one page towards the right.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ScrollTo(System.Single,System.Single)">
            <summary>
            Causes the viewport to scroll the top left edge to the specifed position. 
            </summary>
            <param name="viewportTopPosition">The coordinate in y axis to scroll to.</param>
            <param name="viewportLeftPosition">The coordinate in x axis to scroll to.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.StopFlick">
            <summary>
            Causes scrolling to stop if it is currently being flicked.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnVerticalScrollBarStateMachineThumbChanged(System.Object,System.EventArgs)">
            <summary>
            Handle changes to the vertical ScrollBarStateMachine.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnHorizontalScrollBarStateMachineThumbChanged(System.Object,System.EventArgs)">
            <summary>
            Handles changes to the horizontal ScrollBarStateMachine.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnVerticalScrollBarStateMachineValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handle changes to the vertical ScrollBarStateMachine.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnHorizontalScrollBarStateMachineValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handle changes to the horizontal ScrollBarStateMachine.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnAffine2DManipulationCompleted(System.Object,System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs)">
            <summary>
            Start the inertia processor in Surface screen space.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnAffine2DInertiaCompleted(System.Object,System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs)">
            <summary>
            Inertia is complete so stop processing for it.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.OnAffine2DInertiaDelta(System.Object,System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs)">
            <summary>
            Update the changes to inertia processing.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ProcessResetState(System.Object,System.EventArgs)">
            <summary>
            Handles the ResetState event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ProcessTouchDown(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the TouchDown event.
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ProcessTouchUp(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the TouchUp event.
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ProcessTouchMoved(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the TouchMoved event.
            </summary>
            <param name="touchEvent"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ProcessManipulators">
            <summary>
            Process the manipulations.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.AverageTouchPosition(CoreInteractionFramework.TouchTargetEvent,CoreInteractionFramework.ScrollViewerHitTestDetails,System.Single@,System.Single@)">
            <summary>
            Averages the position of the touchEvent.HitTestDetails position based on the number of touches.
            </summary>
            <param name="touchEvent">The new TouchTargetEvent</param>
            <param name="hitTestDetails">The contacEvent.HitTestDetails as ScrollViewerHitTestDetails</param>
            <param name="averageX"></param>
            <param name="averageY"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.UpdateCurrentManipulators(CoreInteractionFramework.TouchTargetEvent,CoreInteractionFramework.ScrollViewerHitTestDetails)">
            <summary>
            Updates manipulators to reflect the touch change.
            </summary>
            <param name="touchEvent">The new TouchTargetEvent</param>
            <param name="details">The contacEvent.HitTestDetails as ScrollViewerHitTestDetails</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.SetElasticScrollBarValueY(System.Single)">
            <summary>
            Sets the verticalScrollBarStateMachine.Value to what is passed in applying the elastic effect.
            </summary>
            <param name="averageY"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.SetElasticScrollBarValueX(System.Single)">
            <summary>
            Sets the horizontalScrollBarStateMachine.Value to what is passed in applying the elastic effect.
            </summary>
            <param name="averageX"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ClampScrollBarValueY(System.Single,System.Single)">
            <summary>
            Sets the verticalScrollBarStateMachine.Value between 1 and 0
            </summary>
            <param name="actualValueY"></param>
            <param name="constrainedValueY"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ClampScrollBarValueX(System.Single,System.Single)">
            <summary>
            Sets the horizontalScrollBarStateMachine.Value between 1 and 0
            </summary>
            <param name="actualValueX"></param>
            <param name="constrainedValueX"></param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromVerticalControlToValueSpace(System.Single)">
            <summary>
            Converts from vertical control space to vertical Value space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromHorizontalControlToValueSpace(System.Single)">
            <summary>
            Converts from horizontal control space to horizontal Value space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromVerticalValueToControlSpace(System.Single)">
            <summary>
            Converts from vertical Value space to vertical control space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromHorizontalValueToControlSpace(System.Single)">
            <summary>
            Converts from vertical Value space to vertical control space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromHorizontalValueToScreenSpace(System.Single)">
            <summary>
            Converts from horizontal value space to horizontal screen space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromHorizontalScreenToValueSpace(System.Single)">
            <summary>
            Converts from horizontal screen space to horizontal value space.
            </summary>
            <param name="screenValue"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromVerticalValueToScreenSpace(System.Single)">
            <summary>
            Converts from vertical value space to vertical screen space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.ScrollAdapter.ConvertFromVerticalScreenToValueSpace(System.Single)">
            <summary>
            Converts from vertical screen space to vertical value space.
            </summary>
            <param name="screenValue"></param>
            <returns></returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.HorizontalScrollBarStateMachine">
            <summary>
            Gets or sets the horizontal ScrollBarStateMachine.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.VerticalScrollBarStateMachine">
            <summary>
            Gets or sets the vertical ScrollBarStateMachine.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.VerticalViewportSize">
            <summary>
            The vertical normalized height of the viewport. 
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.HorizontalViewportSize">
            <summary>
            The horizontal normalized width of the viewport. 
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.VerticalViewportStartPosition">
            <summary>
            The starting normalized vertical coordinate of the viewport.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.HorizontalViewportStartPosition">
            <summary>
            The starting normalized horizontal coordinate of the viewport.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.VerticalElasticity">
            <summary>
            The left elastic margin.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.HorizontalElasticity">
            <summary>
            The right elastic margin.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.GotViewportChange">
            <summary>
            Gets the value of the ViewportChanged event.
            True if any of the viewport properties have changed since the controller was updated, false otherwise.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ScrollAdapter.IsScrolling">
            <summary>
            Gets a value which determines if scrolling is occuring.
            True if scrolling, false otherwise.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.ScrollAdapter.ViewportChanged">
            <summary>
            Fired when any of the viewport properties change.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ListBoxStateMachineItemCollection">
            <summary>
            Maintains a list of <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> objects.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.Add(CoreInteractionFramework.ListBoxStateMachineItem)">
            <summary>
            Adds and item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
            <example>
            <para>
             The following code example loads game content elements, including 
             <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> objects by using
             the <strong>Add</strong> method.
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" region="Load Content" title="Load Content" lang="cs"/>
            </example>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.Clear">
            <summary>
            Clears all the items in the collection.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.Contains(CoreInteractionFramework.ListBoxStateMachineItem)">
            <summary>
            Gets a Boolean value that indicates if the 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong>
            is 
            in the collection.
            </summary>
            <param name="item">The item to look for in the collection.</param>
            <returns><strong>true</strong> if the item is in the collection.</returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.CopyTo(CoreInteractionFramework.ListBoxStateMachineItem[],System.Int32)">
            <summary>
            Copies all of the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> objects
            in this collection from the specified list 
            position to the end of 
            the collection.
            </summary>
            <param name="array">The destination to copy this list box collection to.</param>
            <param name="arrayIndex">The index of this collection to begin copying from.</param>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.Remove(CoreInteractionFramework.ListBoxStateMachineItem)">
            <summary>
            Removes the specified <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object
            from 
            the list.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><strong>true</strong> if the item is removed successfully.</returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object that iterates 
            over the collection.
            </summary>
            <returns>A <strong>ListBoxStateMachineItem</strong> enumerator.</returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object that iterates through the 
            collection.
            </summary>
            <returns>A <strong>System.IEnumerator</strong>.</returns>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxStateMachineItemCollection.System#Collections#Generic#IEnumerable{CoreInteractionFramework#ListBoxStateMachineItem}#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the collection.
            </summary>
            <returns>A <strong>System.IEnumerator</strong>.</returns>
        </member>
        <member name="E:CoreInteractionFramework.ListBoxStateMachineItemCollection.ListBoxItemRemoved">
            <summary>
            Occurs when a <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object is removed from the collection.
            </summary>
        </member>
        <member name="E:CoreInteractionFramework.ListBoxStateMachineItemCollection.ListBoxItemAdded">
            <summary>
            Occurs when a <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object is added to the collection.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItemCollection.Item(System.Int32)">
            <summary>
            Gets the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object at the specified position on 
            this collection.  
            </summary>
            <param name="index">The index location within the collection of the item to retrieve.</param>
            <returns>The <strong>ListBoxStateMachineItem</strong> at the specified index.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItemCollection.Count">
            <summary>
            Gets the number of <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> elements 
            in this collection.
            </summary>
            <returns>The number of elements in the collection.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItemCollection.IsReadOnly">
            <summary>
            Gets a Boolean value that indicates whether the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItemCollection"/></strong> 
            object is read-only. 
            </summary>
            <remarks><note type="caution"> This property is always false.</note></remarks>
            <returns>Always <strong>false</strong>.</returns>
        </member>
        <member name="T:CoreInteractionFramework.ScrollViewerStateMachine">
            <summary>
            Represents a scroll viewer state machine as part of the Model-View-Controller (MVC) pattern. 
            The basic purpose of the class is to provide a wrapper for the <strong>ScrollAdapter</strong> class.  
            </summary>
            <remarks><note type="caution"> In this API, state machine represents the Model of part 
            of the MVC pattern.</note>
            </remarks>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.#ctor(CoreInteractionFramework.UIController,System.Int32,System.Int32)">
            <summary>
            Creates a new <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> instance
            with the specified parameters.
            </summary>
            <param name="controller">The <strong>UIController</strong> object that dispatches hit testing.</param>
            <param name="numberOfPixelsInHorizontalAxis">
            The number of pixels that this control occupies horizontally. 
            For more information, see 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxis">NumberOfPixelsInHorizontalAxis</see></strong>.
            </param>
            <param name="numberOfPixelsInVerticalAxis">
            The number of pixels that this control occupies vertically. 
            For more information, see 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxis">NumberOfPixelsInVerticalAxis</see></strong>.
            </param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.OnViewportChanged(System.Object,System.EventArgs)">
            <summary>
            Called when any of the viewport properties change.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.PageUp">
            <summary>
            Scrolls the viewport 1 page towards the top.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.PageDown">
            <summary>
            Scrolls the viewport 1 page towards the bottom.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.PageLeft">
            <summary>
            Scrolls the viewport 1 page towards the left.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.PageRight">
            <summary>
            Scrolls the viewport 1 page towards the right.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.ScrollTo(System.Single,System.Single)">
            <summary>
            Scrolls the viewport to the specified values. 
            </summary>
            <param name="viewportTopPosition">The y-coordinate to scroll to.</param>
            <param name="viewportLeftPosition">The x-coordinate to scroll to.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.StopFlick">
            <summary>
            Stops the thumb from scrolling if it is currently being flicked.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.OnTouchDown(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the <strong>TouchDown</strong> event.
            </summary>
            <param name="touchEvent">The container for the touch that the event is about.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.OnTouchMoved(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the <strong>TouchMoved</strong> event.
            </summary>
            <param name="touchEvent">The container for the touch that the event is about.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.OnUpdated(System.Collections.Generic.Queue{CoreInteractionFramework.TouchTargetEvent})">
            <summary>
            Processes all the manipulator changes in one badge.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.OnTouchUp(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the <strong>TouchUp</strong> event.
            </summary>
            <param name="touchEvent">The container for the touch that the event is about.</param>
        </member>
        <member name="M:CoreInteractionFramework.ScrollViewerStateMachine.OnResetState(System.Object,System.EventArgs)">
            <summary>
            Handles the <strong>ResetState</strong> event.
            </summary>
            <param name="sender">A <strong>UIController</strong> object.</param>
            <param name="e">Empty.</param>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.TypeOfHitTestDetails">
            <summary>
            Gets the type of <strong><see cref="T:CoreInteractionFramework.ScrollViewerHitTestDetails"/></strong>.
            </summary>
            <returns>
            Type as <strong>typeof(ScrollViewerHitTestDetails)</strong> of this 
            <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> object.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.HorizontalScrollBarStateMachine">
            <summary>
            Gets or sets the horizontal 
            <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object.
            </summary>
            <returns>
            A <strong>ScrollBarStateMachine</strong> object as this <strong>scrollAdapter.HorizontalScrollBarStateMachine</strong>.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.VerticalScrollBarStateMachine">
            <summary>
            Gets or sets the vertical <strong><see cref="T:CoreInteractionFramework.ScrollBarStateMachine"/></strong> object.
            </summary>
            <returns>
            A <strong>ScrollBarStateMachine</strong> as this <strong>scrollAdapter.VerticalScrollBarStateMachine</strong>.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.VerticalViewportSize">
            <summary>
            Gets or sets the vertical normalized height of the viewport 
            that is associated with this 
            <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> object.
            </summary>
            <returns>
            The vertical viewport size of this <strong>ScrollViewerStateMachine</strong> object.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.HorizontalViewportSize">
            <summary>
            Gets or sets the horizontal normalized width of the viewport 
            that is associated with this <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> object.
            </summary>
            <returns>
            The horizontal viewport size of this <strong>ScrollViewerStateMachine</strong> object.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.VerticalViewportStartPosition">
            <summary>
            Gets or sets the starting normalized vertical coordinate 
            of the viewport that is associated with this 
            <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> object.
            </summary>
            <returns>
            The vertical viewport start position of this <strong>ScrollViewerStateMachine</strong> object.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.HorizontalViewportStartPosition">
            <summary>
            Gets or sets the starting normalized horizontal coordinate 
            of the viewport that is associated with this 
            <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> object.
            </summary>
            <returns>
            The horizontal viewport start position of this <strong>ScrollViewerStateMachine</strong> object.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.VerticalElasticity">
            <summary>
            Gets or sets the vertical elasticity (left elastic margin) 
            of this <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> object.
            </summary>
            <returns>
            The vertical elasticity of this <strong>ScrollViewerStateMachine</strong> object.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.HorizontalElasticity">
            <summary>
            Gets or sets the horizontal elasticity (right elastic margin) 
            of this <strong><see cref="T:CoreInteractionFramework.ScrollViewerStateMachine"/></strong> object.
            </summary>
            <returns>
            The horizontal elasticity of this <strong>ScrollViewerStateMachine</strong> object.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.GotViewportChange">
            <summary>
            Gets a value that determines whether the viewport has changed. 
            </summary>
            <returns><strong>true</strong> if any of the viewport properties changed since updating the 
            controller; otherwise, <strong>false</strong>.
            </returns>
        </member>
        <member name="P:CoreInteractionFramework.ScrollViewerStateMachine.IsScrolling">
            <summary>
            Gets a value that determines if scrolling is 
            occurring. 
            </summary>
            <returns>
            <strong>true</strong> if currently scrolling; otherwise, <strong>false</strong>.
            </returns>
        </member>
        <member name="E:CoreInteractionFramework.ScrollViewerStateMachine.ViewportChanged">
            <summary>
            Occurs when any of the viewport properties change.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.TouchTargetEvent">
            <summary>
            Represents a specific event that has occurred for a touch. 
            </summary>
            <remarks>
            <para>The <strong><see cref="T:CoreInteractionFramework.TouchEventType"/></strong>
            enumeration defines the following touch events:
            <strong>Added</strong>, <strong>Changed</strong>, <strong>Removed</strong>, 
            <strong>Enter</strong>, and <strong>Leave</strong>. <strong>TouchTargetEvent</strong> 
            objects have state set to <strong>Leave</strong> or <strong>Enter</strong>,
            depending on <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> route 
            destination and the capture state.</para>
            <note type="caution"> Touches that are processed on 
            <strong>Added</strong>, <strong>Changed</strong>, <strong>Removed</strong>, 
            <strong>Enter</strong>, and <strong>Leave</strong>
            events are immediately sent to the state machine, so the touches in a 
            frame update are split into separate update calls for the state machines. This action is 
            important because a state machine often changes the capture state of a touch 
            when it receives one of these four events.  
            </note>
            </remarks>
        </member>
        <member name="M:CoreInteractionFramework.TouchTargetEvent.#ctor(CoreInteractionFramework.TouchEventType,Microsoft.Surface.Core.TouchPoint)">
            <summary>
            Parameterized class constructor that creates a TouchTargetEvent.
            </summary>
            <param name="eventType">Event types include touch Added, Changed, Removed, 
            Enter and Leave.</param>
            <param name="touch">The subject touch of this TouchTargetEvent</param>
        </member>
        <member name="P:CoreInteractionFramework.TouchTargetEvent.Touch">
            <summary>
            Gets a value that represents the <strong>Touch</strong> source 
            of this event.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.TouchTargetEvent.EventType">
            <summary>
            Gets a value that represents the <strong><see cref="T:CoreInteractionFramework.TouchEventType"/></strong> 
            that is associated with this <strong>TouchTargetEvent</strong> event.  
            </summary>
            <remarks>The possible values include <strong>Added</strong>, <strong>Changed</strong>, <strong>Removed</strong>, 
            <strong>Enter</strong>, and <strong>Leave</strong>.</remarks>
        </member>
        <member name="P:CoreInteractionFramework.TouchTargetEvent.HitTestDetails">
            <summary>
            Gets a value that represents details about a hit test for 
            certain state machines.  
            </summary>
            <remarks>For more information
            about which state machines require hit test details, see <strong><see cref="T:CoreInteractionFramework.IHitTestDetails">IHitTestDetails</see></strong>.
            </remarks>
        </member>
        <member name="T:CoreInteractionFramework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.CalledCapturedHitTestInformationForReleasedElement">
            <summary>
              Looks up a localized string similar to The method SetCapturedHitTestInformation was called on a HitTestResult which was not captured. Call SetUncapturedHitTestInformation instead..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.CalledReleaseHitTestInformationForCapturedElement">
            <summary>
              Looks up a localized string similar to The method SetUncapturedHitTestInformation was called on a HitTestResult which was captured. Call SetCapturedHitTestInformation instead..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.ControllerSetToADifferentController">
            <summary>
              Looks up a localized string similar to The Controller property on IInputElementStateMachine {0} is set to a different UIController then it was hit tested to..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.HitTestDetailsMustBeTypeofException">
            <summary>
              Looks up a localized string similar to The IHitTestDetails supplied: {0} were not of type {1} as is required by {2}..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.InvalidOrientationArgumentException">
            <summary>
              Looks up a localized string similar to The orientation {0} is not valid for property {1}..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.ItemIsAlreadyInCollection">
            <summary>
              Looks up a localized string similar to The item is already in this collection or another collection.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.ItemNotInCollection">
            <summary>
              Looks up a localized string similar to The item provided is not in the ListBoxStateMachine&apos;s {0} collection..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.MaximumQueueSizeReached">
            <summary>
              Looks up a localized string similar to The maximum size for the controller queue {0} touch events was reached..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.PointFToStringFormat">
            <summary>
              Looks up a localized string similar to X={0}, Y={1}.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.SizeFToStringFormat">
            <summary>
              Looks up a localized string similar to Width={0}, Height={1}.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.StateMachineMustBeOfType">
            <summary>
              Looks up a localized string similar to The StateMachine provided was of type {0}, but must be of type {0}.  This could be because the touch is already captured to type {1}..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.UpdateCannotBeCalledDuringUpdate">
            <summary>
              Looks up a localized string similar to Update cannot be called while Update is executing..
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Properties.Resources.VectorToStringFormat">
            <summary>
              Looks up a localized string similar to X={0}, Y={1}.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ListBoxStateMachineItemEventArgs">
            <summary>
            Specifies event details for list box item events.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.ListBoxStateMachineItemEventArgs.Item">
            <summary>
            Gets the <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachineItem"/></strong> object.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.HitTestCallback">
            <summary>
            Defines a delegate for the method that is called to determine if touches collide with UI elements.  
            </summary>
            <remarks>The parameters include two collections:
            <list type="bullet">
            <item>The first parameter is a 
            <strong>ReadOnlyHitTestResultCollection</strong> collection of elements that contain 
            touches that are not 
            captured by an <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> state machine. 
            The delegate implementation should hit 
            test each touch element of the <strong>ReadOnlyHitTestResultCollection</strong> collection and assign the 
            <strong>IInputElementStateMachine</strong> instance that the touch hit. If the touch 
            did not hit anything, the <strong>IInputElementStateMachine</strong> instance should be set to null.</item>
            <item>The second parameter is a <strong>ReadOnlyHitTestResultCollection</strong> collection of elements 
            that contain touches that an <strong>IInputElementStateMachine</strong> captured. The <strong>Touch</strong> property 
            of the <strong><see cref="T:CoreInteractionFramework.HitTestResult"/></strong> is initialized with the 
            <strong>IInputElementStateMachine</strong> instance that
            captured it. The delegate implementation should test each touch to determine if 
            it hit. Those touches that did not hit should be set to null.</item>
            </list>
            
            
            
            </remarks>
            <param name="uncapturedTouchEventsToHitTest">A paired list of which touches hit 
            which <strong>IInputElementStateMachine</strong> instances.</param>
            <param name="capturedTouchEventsToHitTest">A paired list of which captured touches 
            hit which <strong>IInputElementStateMachine</strong> instances.</param>
        </member>
        <member name="T:CoreInteractionFramework.PointF">
            <summary>
            Yes, this is basically the same as System.Drawing.PointF. Why don't we use
            that one? Because we don't want to link to that assembly. We had been just using
            two floats everywhere, but I just couldn't take it any more. A point class is just
            too nice a thing.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Create a basic point structure
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CoreInteractionFramework.PointF.op_Explicit(CoreInteractionFramework.PointF)~CoreInteractionFramework.SizeF">
            <summary>
            Creates a SizeF structure with a Width equal to this point's X value
            and a Height equal to this point's Y value.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>A SizeF structure with a Width equal to this point's X value
            and a Height equal to this point's Y value.</returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.op_Explicit(CoreInteractionFramework.PointF)~CoreInteractionFramework.VectorF">
            <summary>
            Creates a VectorF structure with an X value equal to this point's X value
            and a Y value equal to this point's Y value.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>A VectorF structure with an X value equal to this point's X value
            and a Y value equal to this point's Y value.</returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.op_Inequality(CoreInteractionFramework.PointF,CoreInteractionFramework.PointF)">
            <summary>
            Returns true if the two points are different
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.op_Equality(CoreInteractionFramework.PointF,CoreInteractionFramework.PointF)">
            <summary>
            Returns true if the points are the same. Note that since
            these are floats a small amount of error may cause similar
            points to not be equal. If you want precision adjustment
            you need to do that yourself.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.op_Addition(CoreInteractionFramework.PointF,CoreInteractionFramework.VectorF)">
            <summary>
            Translates the specified PointF by the specified VectorF
            and returns the result.
            </summary>
            <param name="pt">The point to translate.</param>
            <param name="offset">The amount by which to translate the point.</param>
            <returns>The result of translating the specified point by the specified vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.op_Subtraction(CoreInteractionFramework.PointF,CoreInteractionFramework.PointF)">
            <summary>
            Subtracts the specified PointF from another specified PointF
            and returns the difference as a VectorF.
            </summary>
            <param name="point1">The point from which point2 is subtracted.</param>
            <param name="point2">The point to subtract from point1.</param>
            <returns>The difference between point1 and point2.</returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.op_Subtraction(CoreInteractionFramework.PointF,CoreInteractionFramework.VectorF)">
            <summary>
            Subtracts the specified VectorF from the specified PointF
            and returns the resulting PointF.
            </summary>
            <param name="point">The point from which vector is subtracted.</param>
            <param name="vector">The vector to subtract from point</param>
            <returns>The difference between point and vector.</returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.Equals(System.Object)">
            <summary>
            equals override
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.GetHashCode">
            <summary>
            hash code override
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreInteractionFramework.PointF.ToString">
            <summary>
            tostring override
            </summary>
            <returns></returns>
        </member>
        <member name="P:CoreInteractionFramework.PointF.X">
            <summary>
            The x coordinate
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.PointF.Y">
            <summary>
            the y coordinate
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ListBoxHitTestDetails">
            <summary>
            Provides more details about the touch hit on a list box, including 
            members of <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> 
            through its <strong><see cref="T:CoreInteractionFramework.ScrollViewerHitTestDetails"/></strong> base class. 
            </summary>
            <remarks>
            <note type="caution"> The <strong>ListBoxHitTestDetails</strong> class does not provide 
            any functionality beyond the 
            base class but simplifies API use if hit testing maps to the class that is being 
            tested.
            </note></remarks>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxHitTestDetails.#ctor">
            <summary>
            Creates an <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> object for a 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.ListBoxHitTestDetails.#ctor(System.Single,System.Single)">
            <summary>
            Creates an <strong><see cref="T:CoreInteractionFramework.IHitTestDetails"/></strong> object for a 
            <strong><see cref="T:CoreInteractionFramework.ListBoxStateMachine"/></strong> object with the specified parameters.
            </summary>
            <param name="horizontalPosition">The horizontal normalized coordinate 
            where a touch hit the scroll bar from 0 to 1. A value of 0 indicates a 
            left-most hit, and a value of 1 indicates a right-most hit of the scroll bar.</param>
            <param name="verticalPosition">The vertical normalized coordinate where a 
            touch hit the scroll bar from 0 to 1. A value of 0 indicates a 
            top-most hit, and a value of 1 indicates a bottom-most hit of the scroll bar.</param>
        </member>
        <member name="T:CoreInteractionFramework.TouchEventType">
            <summary>
            The possible types of touch events.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.TouchEventType.Added">
            <summary>
            The touch was added to the Microsoft Surface unit.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.TouchEventType.Removed">
            <summary>
            The touch was removed from the Microsoft Surface unit.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.TouchEventType.Changed">
            <summary>
            The touch was changed.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.TouchEventType.Leave">
            <summary>
            The touch left the UI element.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.TouchEventType.Enter">
            <summary>
            The touch entered a new UI element.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ButtonStateMachine">
            <summary>
            Maintains and manages state that is associated with an application-defined UI button 
            object. 
            </summary>
            <remarks>
            <para>Some aspects of <strong>ButtonStateMachine</strong> state include:</para>
            <list type="bullet">
            <item>What represents a click (<strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.ClickMode" /></strong>).</item>
            <item>Whether the button is pressed or not (<strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.IsPressed" /></strong>).</item>
            <item>If the button is clicked within the current update cycle (<strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.GotClicked" /></strong>)</item>
            </list>
            <para>The <strong>ButtonStateMachine</strong> class is derived from the 
            <strong><see cref="T:CoreInteractionFramework.UIElementStateMachine" /></strong> class.  
            A user-defined button can use <strong>ButtonStateMachine</strong> as a base 
            class to inherit Core Interaction Framework functionality.
            </para>
            <para>When you implement hit testing for <strong>ButtonStateMachine</strong>, 
            <strong><see cref="T:CoreInteractionFramework.IHitTestDetails" /></strong> 
            is not required and consequently you should pass <strong>null</strong> as the second parameter 
            of the <strong><see cref="M:CoreInteractionFramework.HitTestResult.SetUncapturedHitTestInformation" /></strong> method.
            </para>
            <note type="caution"> The Core Interaction Framework and API use the 
            Model-View-Controller (MVC) design pattern. The API state machines 
            represent the Model component of the MVC design pattern. 
            </note>
            </remarks>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.#ctor(CoreInteractionFramework.UIController,System.Int32,System.Int32)">
            <summary>
            Creates an initialized instance of a
            <strong><see cref="T:CoreInteractionFramework.ButtonStateMachine" /></strong> object.
            </summary>
            <param name="controller">A <strong>UIController</strong> object with buffered touches and successfully
            hit testing touches.</param>
            <param name="numberOfPixelsInHorizontalAxis">
            The number of pixels that this control occupies horizontally. 
            For more information, see 
            <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInHorizontalAxis">
            NumberOfPixelsInHorizontalAxis</see></strong>.
            </param>
            <param name="numberOfPixelsInVerticalAxis">
            The number of pixels that this control occupies vertically. 
            For more information, see <strong><see cref="P:CoreInteractionFramework.UIElementStateMachine.NumberOfPixelsInVerticalAxis">
            NumberOfPixelsInVerticalAxis</see></strong>.
            </param>
            <remarks>The <strong><see cref="T:CoreInteractionFramework.UIElementStateMachine" /></strong> base 
            class takes the same <strong>UIController</strong> object and pixel parameters as the 
            <strong>ButtonStateMachine</strong> object.
            </remarks>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnClick">
            <summary>
            Called when a <strong><see cref="E:CoreInteractionFramework.ButtonStateMachine.Click" /></strong> 
            event occurs on this <strong><see cref="T:CoreInteractionFramework.ButtonStateMachine" /></strong> object.  
            </summary>
            <remarks>The <strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.ClickMode" /></strong> property
            defines a Microsoft Surface <em>click</em> for the Core Interaction Framework API.
            </remarks>
            <example>
            <para>
            Subscribe to the <strong>Click</strong> event the same as any Microsoft Windows event, as the following 
            code example shows:
            </para>
            <code lang="cs">myButtonStateMachine.Click += new EventHandler(OnButton_Click);</code>
            <para> In this example, <strong>OnButton_Click</strong> is the name of the method to call when 
            a <strong>myButtonStateMachine </strong> click event is triggered.
            </para>
            </example>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnTouchMoved(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Handles the <strong><see cref="E:CoreInteractionFramework.UIElementStateMachine.TouchMoved" /></strong> event.
            </summary>
            <param name="touchEvent">The touch that changed.</param>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnTouchDown(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Changes the state of the button based on the <strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.ClickMode" /></strong>
            property.
            </summary>
            <param name="touchEvent">The touch that hit the button.</param>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnTouchUp(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Calls <strong><see cref="M:CoreInteractionFramework.ButtonStateMachine.OnClick" /></strong> 
            if the touch is captured over the button and there are no more captured touches.
            </summary>
            <param name="touchEvent">The touch that was removed.</param>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnTouchEnter(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Calls <strong><see cref="M:CoreInteractionFramework.ButtonStateMachine.OnClick" /></strong> 
            if there are no touches over and 
            <strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.ClickMode" /></strong> is <strong>Hover</strong>.
            </summary>
            <param name="touchEvent">The touch that entered.</param>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnTouchLeave(CoreInteractionFramework.TouchTargetEvent)">
            <summary>
            Called when the Touch has left the button.
            </summary>
            <param name="touchEvent">The touch that departed.</param>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnResetState(System.Object,System.EventArgs)">
            <summary>
            Resets the <strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.GotClicked" /></strong> state.
            </summary>
            <param name="sender">A <strong>UIController</strong> object.</param>
            <param name="e">Empty.</param>
        </member>
        <member name="M:CoreInteractionFramework.ButtonStateMachine.OnUpdated(System.Collections.Generic.Queue{CoreInteractionFramework.TouchTargetEvent})">
            <summary>
            Calls <strong><see cref="M:CoreInteractionFramework.ButtonStateMachine.OnClick" /></strong> 
            when the last touch is released over the button.
            </summary>
            <param name="orderTouches">The queue of touches to process.</param>
        </member>
        <member name="E:CoreInteractionFramework.ButtonStateMachine.Click">
            <summary>
            Occurs when a <strong><see cref="T:CoreInteractionFramework.ButtonStateMachine" /> Click</strong> occurs.  
            </summary>
            <remarks>A <strong>Click</strong> is determined by  
            the <strong><see cref="P:CoreInteractionFramework.ButtonStateMachine.ClickMode" /></strong> property.  
            Click modes include <strong>Press</strong>, <strong>Hover</strong>, and <strong>Release</strong>. Core 
            events are triggered between the call to <strong>UIController.Update</strong> and its return. In 
            other words, core events are triggered after the call to <strong>UIController.Update</strong>, but 
            before the <strong>UIController.Update</strong> method completes. 
            </remarks>
        </member>
        <member name="P:CoreInteractionFramework.ButtonStateMachine.ClickMode">
            <summary>
            Gets or sets value that determines what action causes a 
            click.  </summary>
            <remarks>The default action is <strong>Release</strong>.  In <strong>Release</strong> mode, the click event is triggered 
            when the touch is removed (button click up).  
            </remarks>
            <returns>The current enumeration value that identifies what causes a <strong><see cref="T:CoreInteractionFramework.ButtonStateMachine" /></strong> click.</returns>
            <example>
            <para>
            <strong>Release</strong> is the default <strong>ClickMode</strong> that the API sets.  <strong>ClickMode</strong> is read/write, 
            and you can reset it, as the following code example shows:
            </para>
            <code lang="cs">this.ClickMode = ClickMode.Press;</code>
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ButtonStateMachine.GotClicked">
            <summary>
            Gets a value that verifies that 
            a <strong><see cref="E:CoreInteractionFramework.ButtonStateMachine.Click" /></strong> event 
            occurred in the current update.  
            </summary>
            <remarks>You can use the <strong>GotClicked</strong> property instead of using the 
            <strong>Click</strong> event by checking it after <strong><see cref="M:CoreInteractionFramework.UIController.Update" /></strong> is called.   </remarks>
            <returns><strong>true</strong> if the button is clicked within the current update cycle; otherwise, <strong>false</strong>.</returns>
            <example>
            <para>
             In the following code example, the <strong>GotClicked</strong> property is used to discern the Button1 click 
             state and take appropriate action.  
            </para>
             <code source="Core\Framework\StarshipArsenal\MainGameFrame.cs" 
             region="Got Clicked Test" title="Got Clicked Test" lang="cs" />
            </example>
        </member>
        <member name="P:CoreInteractionFramework.ButtonStateMachine.IsPressed">
            <summary>
            Gets a value that verifies if a button is pressed.  
            </summary>
            <remarks>Your application should check a button 
            each time after <strong><see cref="M:CoreInteractionFramework.UIController.Update" /></strong> 
            is called.</remarks>
            <returns><strong>true</strong> if there is a touch currently within the x-boundary and y-boundary of the 
            associated UI element.</returns>
            <example>
            <para>
             In this code example from <strong>StarshipArsenal</strong>, the <strong>IsPressed</strong> property is used to 
             determine which button image to use.  
            </para>
             <code source="Core\Framework\StarshipArsenal\UI\ButtonControl.cs" 
             region="Using IsPressed" title="Using IsPressed" lang="cs" />
            </example>
        </member>
        <member name="T:CoreInteractionFramework.HitTestResult">
            <summary>
            Defines a touch hit test result.
            </summary>
            <remarks>
            Uncaptured touches are placed into <strong>HitTestResult</strong> objects that are 
            placed into a <strong>ReadOnlyHitTestResultCollection</strong> collection. 
            Captured touches 
            are also placed into a <strong>ReadOnlyHitTestResultCollection</strong> collection. These 
            collections are passed to the <strong><see cref="T:CoreInteractionFramework.HitTestCallback"/></strong> 
            delegate implementation.  
            The application provides the delegate method name to the API when 
            the <strong>UIController</strong> object is declared.
            </remarks>
            <example>
            <para>The following code example shows the <strong>HitTestResult</strong> in use in a 
            <strong>HitTestCallback</strong>
            implementation.
            </para>
             <code source="Core\Framework\StarshipArsenal\UI\ButtonControl.cs" region="Button Hit Test" title="Button Hit Test" lang="cs"/>
            </example>
        </member>
        <member name="M:CoreInteractionFramework.HitTestResult.#ctor(CoreInteractionFramework.TouchTargetEvent,CoreInteractionFramework.IInputElementStateMachine)">
            <summary>
            Parameterized internal class constructor.
            </summary>
            <param name="touch">
            An event that has occured for a Surface Touch.</param>
            <param name="model">
            Interface for upating a state machine.</param>
        </member>
        <member name="M:CoreInteractionFramework.HitTestResult.SetCapturedHitTestInformation(System.Boolean,CoreInteractionFramework.IHitTestDetails)">
            <summary>
            Sets information about what captured <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> 
            was hit.  
            </summary>
            <remarks>Your application should call the <strong>SetCapturedHitTestInformation</strong> method 
            on each item in the <strong>capturedTouchEventsToHitTest</strong> 
            collection that is represented by the second parameter of the 
            <strong><see cref="T:CoreInteractionFramework.HitTestCallback"/></strong> delegate.
            </remarks>
            <param name="hitCapturedInputElement"><strong>true</strong> if the captured <strong>IInputElement</strong> 
            object from 
            the collection was hit; otherwise, <strong>false</strong>.</param>
            <param name="hitTestDetails"> Details about the hit test that occurred.  
            This parameter is required, except in the case when the <strong><see cref="P:CoreInteractionFramework.HitTestResult.StateMachine"/></strong> 
            property  
            of a <strong><see cref="T:CoreInteractionFramework.HitTestResult"/></strong> object is null. An exception is thrown in all other cases. 
            The type of <strong>hitTestDetails</strong> object must match the type that is returned from the 
            <strong>TypeOfHitTestDetails</strong> 
            property of the <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> state machine that is captured.
            </param>        
        </member>
        <member name="M:CoreInteractionFramework.HitTestResult.SetUncapturedHitTestInformation(CoreInteractionFramework.IInputElementStateMachine,CoreInteractionFramework.IHitTestDetails)">
            <summary>
            Sets information about what uncaptured 
            <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> state machine was hit, 
            if any, and details about the hit. 
            </summary>
            <remarks>The <em>hitTestDetails</em> parameter can be null in two cases:
            <list type="bullet">
            <item>When the <strong>TypeOfHitTestDetails</strong> on an 
            <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> state machine
            returns null.</item>
            <item>When the <strong>StateMachine</strong> on a 
            <strong><see cref="T:CoreInteractionFramework.HitTestResult"/></strong> object returns 
            null.</item>
            </list>
            An exception is thrown in all other cases. The type of <strong>hitTestDetails</strong> must 
            match the type that is returned from the <strong>TypeOfHitTestDetails</strong> property on the <em>elementHit</em> 
            parameter.
            </remarks>
            <param name="elementHit">The element that a touch hit.</param>
            <param name="hitTestDetails">Details about that hit.</param>
        </member>
        <member name="M:CoreInteractionFramework.HitTestResult.SetHitTestDetails(CoreInteractionFramework.IInputElementStateMachine,System.Type,CoreInteractionFramework.IHitTestDetails,System.Type)">
            <summary>
            Sets the stateMachine and hitTestDetails. Throws an exception returned 
            from the exception parameter if the type of hitTestDetails and the 
            HitTestDetails paired with the stateMachine don't match.
            </summary>
            <param name="stateMachine">State Machine subject of the hit.</param>
            <param name="stateMachineType">Type of State Machine hit.</param>
            <param name="hitTestDetails">Details about the hit.</param>
            <param name="typeOfHitTestDetails">Type of hit test details about the hit.</param>
        </member>
        <member name="P:CoreInteractionFramework.HitTestResult.Touch">
            <summary>
            Gets the touch to hit test against.
            </summary>
            <returns>The touch to test.</returns>
        </member>
        <member name="P:CoreInteractionFramework.HitTestResult.TouchTargetEvent">
            <summary>
            The TouchTargetEvent to hit test against.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.HitTestResult.StateMachine">
            <summary>
            Gets the interface to the state machine that is testing the 
            touch hit.
            </summary>
            <returns>The state machine that does the testing.</returns>
        </member>
        <member name="P:CoreInteractionFramework.HitTestResult.HitTestDetails">
            <summary>
            Gets details about a hit test for certain state machines.
            </summary>
            <remarks>For more information about which state machines require 
            hit test details, see <strong><see cref="T:CoreInteractionFramework.IHitDetails">IHitTestDetails
            </see></strong>.
            </remarks>
            <returns>A touch hit test details object.</returns>
        </member>
        <member name="T:CoreInteractionFramework.Animation">
            <summary>
            Creates an Animation of type float. 
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.Animation.#ctor(System.Single,System.Single,System.TimeSpan)">
            <summary>
            Creates an animation of types int, double or float.  
            </summary>
            <param name="from">The starting position.</param>
            <param name="to">The ending position.</param>
            <param name="duration">The time it takes to get from start to end.</param>
        </member>
        <member name="M:CoreInteractionFramework.Animation.Play">
            <summary>
            Starts the animation.  If paused starts from the point where it is paused.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.Animation.Pause">
            <summary>
            Pauses the animation.
            </summary>
        </member>
        <member name="M:CoreInteractionFramework.Animation.Stop">
            <summary>
            Stops the animation and resets it to the begining. 
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Animation.From">
            <summary>
            Gets the starting position of this animation.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Animation.To">
            <summary>
            Gets the ending position of this animation.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Animation.IsCompleted">
            <summary>
            Gets true if it has completed, false otherwise.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Animation.IsPlaying">
            <summary>
            Is the animation currently playing
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Animation.RemainingTime">
            <summary>
            The remaining time left in this animation.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Animation.Current">
            <summary>
            Gets the current position of the animation.
            </summary>
        </member>
        <member name="P:CoreInteractionFramework.Animation.Duration">
            <summary>
            Gets the duration of this animation.
            </summary>
        </member>
        <member name="T:CoreInteractionFramework.ReadOnlyHitTestResultCollection">
            <summary>
            Specifies a read-only dictionary of touches to 
            <strong><see cref="T:CoreInteractionFramework.IInputElementStateMachine"/></strong> objects.
            </summary>
            <example>
            <para>The following code example shows captured touch and uncaptured touch 
            versions of <strong>ReadOnlyHitTestResultCollection</strong> in a 
             <strong><see cref="T:CoreInteractionFramework.HitTestCallback"/></strong> 
            implementation for <strong><see cref="T:CoreInteractionFramework.ButtonStateMachine"/></strong>.
            </para>
            <note type="caution"> <strong>ButtonStateMachine</strong> does not require hit test details.
            </note>
             <code source="Core\Framework\StarshipArsenal\UI\ButtonControl.cs" region="Button Hit Test" title="Button Hit Test" lang="cs"/>
            </example>
        </member>
        <member name="M:CoreInteractionFramework.ReadOnlyHitTestResultCollection.GetEnumerator">
            <summary>
            Gets an enumerator that checks all possible 
            <strong><see cref="T:CoreInteractionFramework.TouchTargetEvent"/></strong> objects in this 
            <strong><see cref="T:CoreInteractionFramework.ReadOnlyHitTestResultCollection"/></strong>.
            </summary>
            <returns>The enumerator for this hit test collection.</returns>
        </member>
        <member name="M:CoreInteractionFramework.ReadOnlyHitTestResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate over this collection.
            </summary>
            <returns>An enumerator value.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ReadOnlyHitTestResultCollection.Item(System.Int32)">
            <summary>
            Gets a value that represents a 
            <strong><see cref="T:CoreInteractionFramework.HitTestResult"/></strong> object
            that is referenced by the
            <paramref name="index"/> parameter.
            </summary>
            <param name="index">The <strong>HitTestResult</strong> position in the collection.
            </param>
            <returns>The <strong>HitTestResult</strong> object at the specified index.</returns>
        </member>
        <member name="P:CoreInteractionFramework.ReadOnlyHitTestResultCollection.Count">
            <summary>
            Gets the number of items in its 
            <strong><see cref="T:CoreInteractionFramework.ReadOnlyHitTestResultCollection"/></strong> collection.
            </summary>
            <returns>The number of items in this collection.</returns>
        </member>
        <member name="T:CoreInteractionFramework.ClickMode">
            <summary>
            Identifies the touch state that determines 
            when a click occurs. The default mode is <strong>Release</strong>.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ClickMode.Release">
            <summary>
            A click occurs when a touch is added and released.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ClickMode.Press">
            <summary>
            A click occurs when the button is pressed.
            </summary>
        </member>
        <member name="F:CoreInteractionFramework.ClickMode.Hover">
            <summary>
            A click occurs when a touch enters or is added to the button.
            </summary>
        </member>
    </members>
</doc>
